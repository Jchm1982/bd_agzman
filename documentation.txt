 CURSO BD CON ALEJANDRO GUZMAN


***************** Comandos para Crear DB *****************
CREATE database 'nombre de la base de datos';

	======= Para crear DB si no existe =======
CREATE database if not exists 'nombre BD'

***************** Usar nuestra DB *****************
USE 'nombre de la BD';

***************** VER TABLAS QUE CONTIENE DB *****************
SHOW TABLES;

***************** ELIMINAR DB *****************
DROP DATABASE 'nombre de BD a borrar';

***************** CREAR TABLAS EN LA BD *****************
USE 'nombre de la BD';

	CREATE TABLE 'nombre de la tabla'(
		 campo1 tipo(longitud),
		 campo2 tipo(longitud),
		 campo_n tipo(longitud)
	);

***************** ELIMINAR TABLAS EN LA BD *****************
DROP TABLE 'nombre de la tabla';

***************** TIPOS DE DATOS DE LAS COLUMNAS *****************
====TIPOS DE DATOS NUMERICOS
		1.-NUMERO ENTEROS
		2.-NUEMEROS FLOTANTE
	BIT-> [(Longitud)]entre 1 y 64, 1byte

	INT-> [(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(4 bytes). RANGO entre -2,147,483,648 y 2,147,483,647 con signo. LOnGITUD entre 0 y 4,294,967,295 sin signo

	NUMERIC->[(Longitud,decimales)][UNSIGNED][ZEROFILL]. Otro sinonimo de decimal

	TINYINT-> [(Longitud)][UNSIGNED][ZEROFILL], ENTERO(1 byte) longitud de-128 y 127 con signo.LONGITID de 0 a 255 sin signo
	INTEGER->[(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(4 bytes). RANGO entre -2,147,483,648 y 2,147,483,647 con signo. LOnGITUD entre 0 y 4,294,967,295 sin signo

	FIXED->[(Longitud,decimales)][UNSIGNED][ZEROFILL].Sinonimo de decimal.Numero con coma flotante. Longitud de -3.402823466 X 10 a la 38 hasta -1.175494351 X 10 a la -38 ó De 1.175494351 X 10 a la-38 hasta 3.402823466 X 10 a la 38

	BOOL,BOOLEAN->EQUIVALENTE ATINYINT(1), RANGO ENTRE0 Y 1.SE USA PARA FALSO(0) Y VERDADERO(1). 1 byte

	BIGINT->[(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(8 bytes). RANGO entre -9,223,372,036,854,775,807 y 9,223,372,036,854,775,806 con signo. LONGITUD entre 0 y 18,446,744,073,709,551,615 sin signo

	FLOAT

	SMALLINT-> [(Longitud)][UNSIGNED][ZEROFILL] TIPO ENTERO(2 byte). RANGO ENTRE -32,768 y 32,767 con signo, longitud entre0 y65,535 sin signo

	DECIMAL->[(Longitud,decimales)][UNSIGNED][ZEROFILL]. Numero con coma flotante.Longitud de hasta 65 digitos en la parte entera yhasta 30 digitos en la parte decimal(por defecto 0)

	DOUBLE-> [(Longitud,decimales)][UNSIGNED][ZEROFILL]. Numero con coma flotante(doble precisión). Longitud de -1.7976931348623157 X 10 a la 308 hasta -2.2250738585072014 X 10 a la -308 ó De 2.2250738585072014 X 10 a la -308 hasta 1.7976931348623157 X 10a la 308

	MEDIUMINT-> [(Longitud)][UNSIGNED][ZEROFILL], TIPO ENTERO(3 bytes), RANGO entre -8388608 y 8388607 con signo. Longitud entre 0 y2,294,967,295 sin signo

	DEC-> SINONIMO DE DECIMAL

	DOUBLE PRECISION-> SINONIMO DE DOUBLE

====TIPOS DE DATOS FECHA Y HORA
	DATE->Fecha con formato "YYYY-MM-DD". 3 bytes

	DATETIME->[(precisión)] Fecha y Horacon formato "YYYY-MM-DD HH:MM:SS.SSSSSS". El parametro precisión en la parte decimal de los segundos.5 bytes

	TIMESTAMP->[(precisión)].El parametro precisión representala cantidad de dígitos que se usarán para representar una fecha y hora desde 1970 hasta 2037. 4 bytes

	TIME->[(precisión)]. Hora, con formato "HH:MM:SS[precisión valores de SS]". 3 bytes.

	YEAR->Representa el año con formato de cuatro digitos "YYYY" o dos digitos "YY". 1 byte

====TIPOS DE DATOS CADENA DE CARACTERES
	CHAR->[(longitud)]
		-Admite caracteres alfanumericos.
		-Longitud de 1 - 255 caracteres (por defecto 1)
		-Si se asigna una cadena de longitud menor,está se completará con espacios.
	VARCHAR->[(longitud)]
		-Similar a CHAR salvo que es necesario especificar la longitud y no seautorrellena con espacios.

	TINYTEXT->
		-Cadenas de longitud variable
		-Hasta 255 carácteres

	TEXT->
		-Cadenas de longitud variable
		-Hasta 65,535 carácteres (64k)

	MEDIUMTEXT->
		-Cadenas de longitud variable
		-Hasta 16,777,215 carácteres (16Mb)

	LONGTEXT->
		-Cadenas de longitud variable
		-Hasta 4,294,967,295 carácteres (4Gb)

====TIPOS DE DATOS BINARIOS
	BLOB->
		-Objeto Binario que puede almacenar culquiertipo de información. Admite hasta 65,535 caracteres.64Kb

	TINYBLOB->
		-Es similar al BLOB
		-Hasta 255 bytes.

	MEDIUMBLOB->
		-Es similar al BLOB
		-Hasta 16Mb.

	LONGBLOB->
		-Es similar al BLOB
		-Hasta 4Gb

***************** MOSTRAR BD CON VARIANTES CREACION DE BD*****************
show databases like 'cli%';

CREATE database IF NOT EXISTS clientes CHARACTER SET=latin2;(No puede crear la BD por que ya existe)
SHOW WARNINGS;(Muestra Level, Code, Y el mensaje)
SHOW CREATE DATABASE clientes;(Para mostrar cual fue la sintaxis que se uso para la creación de la BD)

***************** MOSTRAR TABLA CON VARIANTES, CREACION DE TABLAS*****************

CREATE[TEMPORARY(permite crear una tabla temporal)]TABLE[IF NOT EXISTS]nombre_tabla
(
	**EN ESTA SECCION ES DONDE SE DEFINEN TODAS LAS COLUMNAS E INDICES QUE COMPONEN LAS TABLAS**

	nombre_columna definicion_Columna(tipo_dato,[NOT NULL | NULL],[DEFAULT{literal | (expr)}], [AUTO_INCREMENT], [UNIQUE[KEY]], [[PRIMARY]KEY], [COMMENT'string'])
	| {INDEX|KEY}[nombre_indice]
	[tipo_indice](columna_llave,...)[opciones_indice]...
)
[DEFAULT] CHARACTER SET[=]charset_name
COMMENT[=]'string'

EJEMPLO:

CREATE TABLE if not EXISTS cliente(

	num_cliente INTEGER NOT NULL AUTO_INCREMENT COMMENT 'Numero de Identificacion del cliente',
    nombre VARCHAR(30) NOT NULL COMMENT 'Nombre del cliente',
    direccion VARCHAR(30) NOT NULL COMMENT 'direccion para entrega de mercancia al cliente',
   	ciudad VARCHAR(20) NOT NULL COMMENT 'Nombre de la ciudad de ubicacion del cliente',
    telefono VARCHAR(15)NOT NULL COMMENT 'El numero telefonico del contacto',
    PRIMARY KEY (num_cliente) COMMENT 'Es el id de cada registro'

);

show columns from cliente; (Con esta instruccion podemos ver lo que creamos en la parte de arriba)
show full columns from cliente; (Con esta instruccion podemos ver la informacion completa que creamos en la parte de arriba)

//PARA VERISONES ANTERIORES A MySQL 8.0
CREATE TABLE IF NOT EXISTS factura
(
    num_factura INTEGER NOT NULL COMMENT 'numero unico de documento',
    num_cliente INTEGER NOT NULL COMMENT 'numero de identifiacion del cliente',
    fecha_factura DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'fecha del documento',
    valor_total MEDIUMINT UNSIGNED NOT NULL COMMENT 'valor total de la transaccion',
    PRIMARY KEY (num_factura) COMMENT 'el numero del documento debe ser unico',
    KEY (num_cliente) COMMENT 'es un indice de busqueda'
);

CREATE TABLE IF NOT EXISTS det_factura
(
	num_factura INTEGER NOT NULL COMMENT 'numero unico de documento',
    cod_producto SMALLINT UNSIGNED NOT NULL COMMENT 'numero de identificacion del producto',
    cant_vendida TINYINT UNSIGNED NOT NULL COMMENT 'cantidad de unidades compradas de este producto',
    valor_unitario SMALLINT UNSIGNED NOT NULL COMMENT 'valor unitariod e compra de este producto',
    PRIMARY KEY (num_factura,cod_producto) COMMENT 'solo un producto igual en cada documento',
    KEY (cod_producto) COMMENT 'indice de busqueda por codigo deproducto'
);

CREATE TABLE IF NOT EXISTS productos
(
    cod_producto SMALLINT UNSIGNED NOT NULL COMMENT 'numero de identificacion del proucto',
    descripcion VARCHAR(60) NOT NULL COMMENT 'descripcion completa del producto',
    precio_venta SMALLINT UNSIGNED NOT NULL COMMENT 'valor unitario de este productio hoy',
    PRIMARY KEY (cod_producto) COMMENT 'cada producto tiene un codigo unico',
    KEY (descripcion) COMMENT 'indice de busqueda por descripcion del producto'
    );

 **************** COMO VISUALIZAR EL ESQUEMA DE LA BD *************

 SHOW CREATE { DATABASE | SCHEMA }
 	[IF NOT EXISTS] nombre_basedatos

Ejemplo:

USE clientes;
SHOW CREATE DATABASE clientes;

 ******************************* COMO INSERTAR DATOS EN LA BD ****************************

INSERT INTO nombre_tabla(donde vas a insertar datos)
		(columna_1, columna_2,...columna_n)
			VALUES (valor_1,valor_2,...valor_n)
	[WHERE condición(opcional)]

EJEMPLO:
1)
INSERT INTO cliente (num_cliente,nombre,direccion,ciudad,telefono)
	VALUES(10,"Alejandro","Av. americas 78-90","bogota","+(57)304-6239358");

2)
INSERT INTO factura (num_factura,num_cliente,valor_total)
	VALUES(2543,10,12500);

3)
INSERT INTO productos (cod_producto,descripcion,precio_venta)
	VALUES(774878344,"tv 4k 65 pulgadas",10000);
4)
INSERT INTO det_factura (num_factura,cod_producto,cant_vendida,valor_unitario)
	VALUES(2543,774878344,1,10000);

 ******************************* SENTENCIA SELECT EN MySQL ****************************

SELECT [* | ALL | col1,col2,... coln]
	[INTO 'archivo_salida']
	 	FROM nombre_tabla[,nombre_tabla,...]
	[WHERE expresion_condicion]
	[GROUP BY columnas]
	[ORDER BY columnas[ ASC | DESC ]]
	[LIMIT #]

	FUNCIONES DE AGREGACION:
	-count:Devuelve el numero total de filas seleccionadas por la consulta.
	-min:Devuelve el valor minimo del campoque especifiquemos.
	-max:Devuelve el valor maximo del campoque especifiquemos.
	-sum:Suma los valores de los campos que especifiquemos(solo numeros)
	-avg:Devuelve el valor promedio de los campos que esecifiquemos(solo numeros)
		EJEMPLOS:
		-SELECT sum(valor_total)
		-SELECT count(*)
		-SELECT min(precio_venta)

******************************* ACTUALIZAR DATOS DE UNA TABLA ****************************

	UPDATE [LOW_PRIORITY][IGNORE] tabla
		SET columna=nuevo_valor
	  [WHERE condicion_seleccion]
		[LIMIT row_count]

EJEMPLO:

1)
UPDATE cliente SET nombre = "Alejandro Guzman" WHERE num_cliente = 10

2)
UPDATE factura,det_factura set det_factura.valor_unitario = det_factura.valor_unitario-500,factura.valor_total=factura.valor_total-500 WHERE det_factura.num_factura = factura.num_factura AND factura.num_factura = 2545 AND det_factura.num_factura = 2545;

	******************************* ELIMINAR REGISTROS DE UNA TABLA ****************************

DELETE [LOW_PRIORITY][QUICK][OGNORE]
	FROM tabla
	[WHERE condicion_seleccion]
	[ORDER BY columna]
	[LIMIT #]

EJEMPLO
1)
DELETE FROM cliente WHERE num_cliente = 20;

  ******************************* CONSULTA DE DATOS NO EXACTO DE UNA TABLA ****************************

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto = 775627384;

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto LIKE "%Videojuegos%";

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto NOT LIKE "%Videojuegos%";

SELECT * FROM productos WHERE cod_producto NOT LIKE "M%";

  ******************************* FUNCIONES DE COMPARACION Y OPERADORES ****************************

BETWEEN ... AND
	Sintaxis -> expresión BETWEEN minimo AND máximo
	Ejemplo -> precio_venta BETWEEN 3000 AND 5000

función COALESCE()
	Sintaxis -> COALESCE(valor1,valor2,valor3,...) = Devuelve el primer valor NOT NULL de una lista o NULL si no hay valores
	Ejemplo -> SELECT nombre,COALESCE(num_factura) FROM clientes, factura WHERE factura.num_cliente =clientes.num_cliente

Operador <->(Seguro o igual a null)
	Sintaxis ->
	Ejemplo ->SELECT NULL <=> 1,NULL <=> NULL, 3 <=> NULL

Operador = (Igual a)
	Sintaxis -> Operador de Igual
	Ejemplo ->1=1,1=2,null=null,null=3,3=null;

Operador >= (Mayor o igual a):Comprueba si una expresion es igual o mayor que otra expresion.
	Sintaxis -> expresión >= valor
	Ejemplo ->precio_venta >=5000

Función GREATES():Devuelve el mayor de los argumentos dados, y devolver null si cualquiera de sus argumentos es null
	Sintaxis -> GREATES(valor1,valor2,...)
	Ejemplo -> SELECT GREATES(15,10,25);

Función IN():Encuentra una coincidencia de los argumentos dados y devuelve 1 si la expresion es igual a cualquiera de los valores de la lista IN, de lo contrario devolverá 0.
	Sintaxis -> expresion IN (value,...)
	Ejemplo ->SELECT num_cliente, nombre FROM cliente WHERE num_cliente IN (10,20)

Función INTERVAL():Devuelve el indice del argumento que es menor que el primer argumento. Devuelve 0 si el primer numero es menor que el segundo numero y 1 si el primer numero es menor que el tercer numero y asi de forma sucesiva. O devolvera -1 si el primer numero es NULL.Todos loas argumentos en está sentencia se tratan como numeros enteros.
	Sintaxis -> INTERVAL(N,N1,N2,N3,...)
	Ejemplo ->SELECT interval (85,1,75,17,30,56,175): Aquie devuelve el numero 5 que es la posicion

Operador IS NOT NULL:Verifica si un valor no es nulo
	Sintaxis -> SELECT 5 IS NOT NULL, 0 IS NOT NULL,NULL IS NOT NULL;
	Ejemplo -> SELECT * FROM productos WHERE descripcion IS NOT NULL;(traiga todos los productos cuya descripcion no sea nula)

Operador IS NOT:Este operador prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->select 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN,null IS NOT UNKNOWN;
	Ejemplo ->

Operador IS NULL:Prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;
	Ejemplo ->

Operador IS:Prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->SELECT 1 IS TRUE,0 IS FALSE,NULL IS UNKNOWN;
	Ejemplo ->

Función ISNULL():Devolvera un valor 1 cuando la expresion sea nula, de lo contrario siempre devolvera un valor 0.
	Sintaxis -> ISNULL(1+0), en este ejemplo devuelve 0 por que no es nulo.
	Ejemplo ->

Función LEAST():Devuelve el argumento mas pequeño de 2 o más argumentos.Si el argumento es NULL el resultado sera null. Si son valores enteros se compararan con valores enteros.Si se utiiza un cotexto de tipo realy todos los argumentos son de tipo real, se compararán de está forma.Si hay una combinacion de numeros y cadenas, se compararán como numeros.
	Sintaxis ->
	Ejemplo ->SELECT LEAST(15,10,25), aqui arrojara el numero 10 como resultado
			  SELECT LEAST("z","m","s"), aqui arrojara la letra m.

  ******************************* OPERADORES LOGICOS ****************************
En MySQL todos los operadores logico se valuan a TRUE, FALSE o NULL(UNKNOWN). Y se implementa de la siguiente forma:
	1->TRUE
	0->FALSE
	NULL

NOT ó !:
Ejemplos:
	SELECT NOT 10; 	-> 0
	SELECT NOT 0; 	-> 1
	SELECT NOT NULL; -> NULL
	SELECT ! (1+1); -> 0
	SELECT ! 1+1; 	-> 1

AND ó &&:Logica.Se evalua a 1 si todos los operadores sondistintos a cero y no NULL, a 0 si uno o más operandos son 0,de otro modo retorna null.
Ejemplos:
	SELECT 1 && 1; 	-> 1
	SELECT 1 && 0; 	-> 0
	SELECT 1 && NULL; -> NULL
	SELECT 0 && NULL; -> 0
	SELECT NULL && 0; 	-> 0

OR ó||:LOGICO. Cuando ambos operandos son no NULL, le resultado es 1 si algun operando es diferente a cero,y 0 de otro modo.Con un operando NULL el resultado es 1 si el otro operando no es cero,y NULL de otro modo.Si ambos operandos son NULL,el resultado es NULL.
Ejemplos:
	SELECT 1 || 1; 	-> 1
	SELECT 1 || 0; 	-> 1
	SELECT 0 || 0; 	-> 0
	SELECT 1 || NULL; -> 1
	SELECT 0 || NULL; -> NULL
	SELECT NULL || 0; 	-> 0

XOR:Logica.Retorna NULL si algún operando es NULL.Para operandos no NULL,evaluaa 1 si un numero par de operadores es distinto a cero,sino retorna 0.
Ejemplos:
	SELECT 1 XOR 1; 	-> 0
	SELECT 1 XOR 0; 	-> 1
	SELECT 1 XOR NULL; 	-> NULL
	SELECT 1 XOR 1 XOR 1; 	-> 1
	******************************* FUNCIONES DE CONTROL DE FLUJO ****************************

CASE:Se basa en la evaluación de una expresion y cada valor posible se puede especificar en una clausula WHEN de forma independiente.Else puede eliminarse.
	CASE expresion
		WHEN valor THEN resultado
		. . .
		ELSE resultado
		END

	EJEMPLO:
	SELECT SUBSTR(descripcion,1,20),
	case count(*)
	when 1 then 1
	else "mas de 1"
	end as "cantidad"
	FROM productos
	GROUP BY 1;

IF:Permite evaluar una expresion y regresar un valor determinado cuandola expresion es verdadera.
	IF(expresion,
		resultado_true,
		resultado_false
	)
	EJEMPLO:
	SELECT descripcion, precio_venta,IF(precio_venta >= 10000,"Costoso","Economico") as Precio_Es FROM productos GROUP BY 1,2;
IFNULL:
	IFNULL(expresion,
		resultado
	)
	EJEMPLO:
	SELECT num_cliente,nombre,ifnull(pais,"pais no definido") FROM cliente;

NULLIF:Compara 2 expresiones y retorna null si ambas expresiones son exactamente iguales de lo contrario regresara la expresion original.
	NULLIF(
	expresion,
	expresion
	)
	EJEMPLO:
		SELECT descripcion,NULLIF(precio_venta,costo) as "sin utilidad" FROM productos;

******************************* FUNCIONES CON CADENAS ****************************
ASC(cadena):Retorna el valor numerico del caracter mas a las izquierda de la cadena de caracteres cadena. Retorna 0 si cadena es la cadena vacia. Retorna NULL si cadena es NULL. ASCII() funciona para caracteres con valores numericos de 0 a 255.
	EJEMPLO:
	select ASCII(5);
	select ASCII("A");
	select ASCII('a');

BIN(numero):Retorna una representacion de cadena de caracteres del valor binario de numero,donde numero es un numero muy largo(BIGINT).
			Retorna NULL si numero es NULL. Convierte a binarios
	EJEMPLO:
	select BIN(1);
	select BIN(3);
	select BIN(4);

BIT_LENGTH(cadena):Retorna la longitud de la cadena de caracteres cadena en bits.(Cuantos bits ocupa
	EJEMPLO:
	select BIT_LENGTH('alejandro');
	select BIT_LENGTH('Texto un poco mas largo');

CHAR(numero,...):Interpreta los argumentos numero como enteros y retorna la cadena de caracteres que consiste en los caracteres dados por los codigos de tales enteros.Los valores NULL no se tienen en cuenta.
	EJEMPLO:
	select CHAR(77,121,83,81,76);(Equivale a la palabra MySQL en ASCII)

CHAR_LENGTH(cadena):Retorna la longitud de la cadena de caracteres cadena, medida en caracteres. Un caracter demultiples bytes cuenta como un solo caracter. Esto significa que para una cadena de caracteres que contiene cinco caracteres de dos bytes,LENGTH() retorna 10, mientras CHAR_LENGTH() retorna 5.
	EJEMPLO:
	select CHAR_LENGTH("ALEJANDRO");(Devuelve el numero 9, por el conteo de caracteres)

CHARACTER_LENGTH(cadena):

COMPRESS(cadena):Comprime una cadena de caracteres.Esta funcion necesita que MySQL se compile con una biblioteca de comprension como zlib. De otro modo, el valor retornado siempre es null. la cadena comprimida puede descomprimirse con UNCOMPRESS().

Los contenidos comprimidos se almacenan de al siguiente forma:
Cadenas vacias se almacenan como cadenas vacias.
Cadenas no vacias se almacenan como lomgitud de cuatro bytes de la cadena descomprimida(los bytes más bajos primero),seguido de lacadena comprimida. Si la cadena acaba con un espacio, se añade un caracter '.' para evitar problemas con eliminacion de espacios finales al almacenar en una columna CHAR o VARCHAR.(El uso de CHAR o VARCHAR para almacenar cadenas comprimidas no se recomienda. Es mejor usar una columna BLOB)
	EJEMPLO:
		insert into productos values(778123894,compress("control remoto"),300,250);

CONCAT(cadena1, cadena2,...):Retorna la cadena resultado de concatenar los argumentos
	EJEMPLO:
			select concat(cod_producto," es ",descripcion) as listado FROM productos;

CONCAT_WS(separador, cadena1,cadena2 ,...):Significa CONCAT WITH Separator(CONCAT con separador) y es una forma especial de CONCAT(). EL primer argumento es el separador para el resto de argumentos.El separador se añade entre las cadenas a concatenar.El separador puede ser una cadena como el resto de los argumentos. Si el separador es NULL, el resultado es NULL.La funcion evita valores NULL tras el argumento separador.
	EJEMPLO:
			select concat_ws(" | ",cod_producto,descripcion,costo,precio_venta) as datos FROM productos;

CONV(numero,de_base_a_base):Convierte numeros entre diferentes bases numericas. Retorna una presentacion de cadena de caracteres para el numero numero,convertido en base origen a base destino. Retorna NULL si algun argumento numero se interpreta como entero.
	EJEMPLO:
	select conv(cod_producto,10,16) as hexadecimal,descripcion from productos;(Convierte de base 10 a Hexadecimal[Base 16])

ELT(numero,cadena1,cadena2,...):Retorna cadena1 si numero = 1,cadena2 si numero= 2,y asi sucesivamente. Retorna NULL si numero es menor que 1 o mayor que el numero de argumentos.
	EJEMPLO:
	select elt(1,"Primero","Segundo","Tercero") as Ordinal;

EXPORT_SET(bits,on,off,separador,#bits):Retorna una cadena en que para cada bit del valor bits,puede obtener una cadena on y para cada bit reasignado obtiene una cadena off.Los bits en bits se examinan de derecha a izquierda (de bots menores a mayores).Las cadenas se añaden al resultado de isquierda a derecha, separados por la cadena separador(siendo el carácter por defecto la coma ',').El número de bits examinados se obtiene por numbre_of_bits(por defecto 64).
	EJEMPLO:
	select export_set(5,'Y','N','-',4);

FIELD(buscar,cadena1,cadena2,...):Retorna el indice de buscar en la lista cadena1,cadena2,...Retorna 0 si no se encuentra buscar.
Si todo los argumentos de FIELD() son cadenas, todos los argumentos se comparan como cadens. Si todos los argumentos son números, se comparan como números.De otro modo, los argumentos se comparan como números con doble precisión.
Si buscar es NULL, el valor retornado es 0 porque NULL falla en comparaciones de comparación con cualquier valor,FIELD() es el complemento de ELT().
	EJEMPLO:
	select field("ALE","AGC","ALE","ALEGUZMAN") as encontrado;
	select field("Consola Videojuegos Play 4",descripcion) as Encontrado,cod_producto from productos;

FIND_IN_SET(cadena,lista_cadena):Retorna un valor en el rango de 1 a N si la cadena buscar está en la lista de cadenas lista_cadena consistente de N subcadenas. Una lista de cadenas es una cadena compuesta de subcadenas separadas por caracteres','.Si el primer argumento es una cadena constante y el segundo es una columna de tipo SET, la función FIND_IN_SET() está optimizada para usar artimética de bit. Retorna 0 si buscar no está en lista_cadena o si lista_cadena es la cadena vacía. Retorna NULL si algún argumento si el primer argumento contiwnw un cáracter de coma(',').
	EJEMPLO:
	select find_in_set("Guzman","Alejandro,Guzman,Castellanos") as Encontrado;

HEX(numero_o_cadena):Si numero_o_cadena es un número, retorna una cadena de representación del valor hexadecimal de numero, donde numero es un número muy grande (BIGINT).Esto es equivalente a CONV(N,10,16).

Si numero_o_cadena es una cadena,esta función retorna una cadena hexadecimal de cadena caracteres, donde cada carácter en cadena se convierte a dos dígitos hexadecimales.
	EJEMPLO:
	select hex("alejandro") as resultado;
	select 0x616C656A616E64726F as resultado;
FIND_IN_SET(cadena,lista_cadena):

INSERT(cadena,pos,longitud,nuevacadena):Retorna la cadena cadena, con la subcadena comenzando en la posición pos y longitud caracteres reemplazados por la cadena nuevacadena. Retorna la cadena original si pos no esta entre la longitud de la cadena. Remplaza el resto de la cadena a partir de la posición por su longitud no está dentro de la longitud del resto de la cadena. Retorna NULL si cualquier argumento es nulo.
	EJEMPLO:
	select insert(descripcion,9,0,"en oferta - ") from productos where descripcion like "Consola%";

INSTR(cadena,subcadena):Retorna la posición de la primera ocurrencia de la subcadena subcadena en la cadena cadena.
	EJEMPLO:
	select instr(descripcion,"Videojuegos") as resultado, cod_producto from productos;

LCASE(cadena)
LOWER(cadena):Retorna la cadena cadena con todos los caracteres cambiadosa minuscula segun el mapeo del conjunto de caracteres actual(por defectos es ISO-8859-1 Latin1)
	EJEMPLO:
	select lower(descripcion) from productos;

LEFT(cadena,longitud):Retorna los longitud caracteres empezando por la izquierda de la cadena cadena.
	EJEMPLO:
	select left(descricpion,8) as abreviado from productos;

LENGTH(cadena):Retorna la longitud de la cadena cadena, medida en bytes.Un caracter multi-byte cuenta como múltiples bytes. Esto siginifica que para cadenas que contengan cinco caracteres de dos bytes, LENGTH() retorna 10, MIentras que CHAR_LENGTH() retorna 5.
	EJEMPLO:
	select cod_producto, length(descripcion) as longitud from productos;

LOAD_FILE(archivo):Lee el archivo y retorna el contenido como cadena de caracteres. El archivo ebe estar localizado en el servidor, debe especificar la ruta completa al archiv, y dene tener el privilegio FILE. El archivo debe ser legible por todo el mundo y su tamaño menor a max_allowed_packet bytes.

Si el archivo no existe o no puede ser leido debido a que una de las anteriores condiciones no se cumple, la funcion retorna NULL.
	EJEMPLO:
	alter table 'productos' add 'caracteristicas' BLOB NULL default NULL;

	update productos set caracteristicas=load_file("ps4.txt") where cod_producto =773819011;

LOCATE(subcadena,cadena)
LOCATE(subcadena,cadena,[posicion]):La primera retorna la posicion de la primera ocurrencia de la subcadena subcadena en la cadena.
	La segunda sintacis retorna la posición de la primera ocurrencia de la subcadena subcadena en la cadena cadena, comenzando en la posición posicion. Retorna 0 si subcadena no está en cadena.
	SINTAXIS:
	LOCATE(subcadena, cadena)
	 POSITION(subcadena IN cadena)
	INSTR(cadena, subcadena)

	Observa que la sitaxis 1 es muy parecida a la función INSTR que vimos hace un momento, sin embargo, los argumentos están invertidos.
	LOCATE y POSITION son sinónimos.
	EJEMPLO:
	select locate ("videojuegos", descripcion) as busqueda, cod_producto from productos;

LPAD(cadena,longitud,cadenapad):Retorna la cadena cadena,alineado a la isquierda con la cadena cadenapad a una longitud de longitud caracteres.Si cadena es mayor que longitud, el valor retornado se acorta a longitud caracteres.
	EJEMPLO:
	select LPAD('que tal',12,'Hola ');
LTRIM(cadena):Retorna la cadena cadena con los caracteres en blanco iniciales eliminados. Se puede utilizar para ajustar números a la izquierda en la salida del select.
	EJEMPLO:
	select ltrim("	Cadena de texto");Limpia el texto
	select ltrim(cod_producto) from productos;

MAKE_SET(bits,cadena1,cadena2,...):Retorna un conjunto de valores (una cadena conteniendo subcadenas separadas por caracteres ',') consistiendo en cadenas que tienen el bit correspondiente en bits asignado. cadena1 se corresponde el bit 0, cadena2 al bit 1, y así. 	Los valores NULL en caena1, cadena2, ... no se añaden al resultado.
	EJEMPLO:
	select make_set(1|8, 'hola','buenos','dias','mundo');

MID(cadena,posicion,longutud)

SUBSTRING(cadena,pos)
SUBSTRING(cadena FROM posicion)

SUBSTRING(cadena,posicion,longitud)
SUBSTRING(cadena FROM posicion FOR longitud)
La forma de está sintaxis sin el argumento longitud(las que no tienen) regresan una subcadena de la cadena especificada en el parametro cadena, comenzando en la posicion indicada en posicion.

Y las que tengan longitud regresan como resultado una longitud especificada en longitud a partir de la cadena especificada comenzando en la posicion indicada en el parametro posicion

Las formas que usan el FROM son sintaxis SQL estandard. En MySQL 5.0. es posible usar valores negativos para posicion. En este caso, el inicio de la subcadena son posicion caracteres a partir del final de la cadena, enlugar del principio.

Un valor negativo puede usarse para posicion en cualquier de las formas de está función.
	EJEMPLO:
	select substring(descripcion,5) as reducido from productos;

OCT(numero):Retorna una representación en cadena del valor octalde numero,donde numero es un numero largo(BIGINT). Retorna NULL si numer es NULL.
	EJEMPLO:
	select oct(cod_producto), descripcion from productos;

OCTET_LENGTH(cadena):

ORD(cadena):Si el caracter más a la izquierda de la cadena cadena es un carácter multi-byte, retorna el código d ese carácter, calculado a partir del valor numérico de sus bytes usando esta fórmula:
(1st byte code)
+(2nd byte code * 256)
+(3rd byte code * 2562)...

Si el caracter más al a izquierda no es multi-byte, ORD() retorna el mismo valor que la función. ASCCII().
	EJEMPLO:
	select ORD(descripcion) from productos;

POSITION(subcadena IN cadena):

QUOTE(cadena):Acota una cadena para producir un resultado que puede usarse como un valor con caracteres de escape en un comando SQL.La cadena se retorna rodeado por comillas sencillas y con cada instancia de comillas sencilla(' ' '), antibarra('\'), ACII NUL, y control-Z predecidos por una antibarra.

Si el argumento es NULL, el valor de retorno es la palabra "NULL" sin comillas alrededor.
	EJEMPLO:
	select quote ("Don't do that.");Encapsula el caracter especial

REPEAT(cadena,contador):Retorna una cadena consistente de la cadena repetida cantidad veces. SI cantidad <=0.Retorna una cadena vacía. Retirna NULL si cadena o cantidad son NULL.
	EJEMPLO:
	select repeat("Hola",5);
	select repeat("*",40);

REPLACE(cadena,de_cadena,a_ cadena):Retorna la cadena cadena contodas las ocurrencias de la cadena de_cadena remplazadas con la cadena a_cadena.
	EJEMPLO:
	select replace(descripcion, "VideoJuegos","Gamer") from productos;

REVERSE(cadena):Retorna la cadena cadena con el orde de los caracteres invertidos.
	EJEMPLO:
	select cod_producto, reverse(descripcion) from productos;

RIGHT(cadena,longitud):Retorna los caracteres del lado derecho de la cadena cadena.
	EJEMPLO:
	select cod_producto, right(descripcion, 7) from productos;

RPAD(cadena,longitud,cadenapad):Retorna la cadena cadena, alineada a la derecha con la cadena cadenapad con una longitud de longitud caracteres. Si cadena es mayor que longitud, el valor de retorno se corta a longitud caracteres.
	EJEMPLO:
	select rpad(decripcion,40," *oferta* ") from productos;

RTRIM(cadena):Retorna la cadena cadena con los espacios precedentes eliminados.
	EJEMPLO:
	select rtrim('Texto con espacio a la derecha');

SOUNDEX(cadena):Retorna una cadena soundex de cadea. Dos cadenas que suenen igual deben tener cadenas soundex idénticas. Una cadena soundex estándar tienen cuatro caracteres de longitud, pero la función SOUNDEX() retorna una cadena arvitrariamente larga.

Puede usar SUBSTRING() en el resultado para obtener una cadena soundex estandar. Todos los caracteres no alfabeticos en cadena se ignoran. Todos los caracteres alfabeticos internacionales fuera de rango A-Z se tratan como vocales.
	EJEMPLO:
	select cod_producto, soundex(descripcion) from productos;

SPACE(numero):Retorna la cadena consistente en numero caracteres blancos.
	EJEMPLO:
	select space(10),descripcion from productos where descripcion li "Consola%";
	select concat(space(10),descripcion) from productos where descripcion like "Consola%"


SUBSTRING(cadena,posicion[,longitud]):


SUBSTRING_INDEX(cadena,delimitador,cont):Retorna la subcadena de la cadena cadena antes de contador ocurrencias del delimitador delimitador.Si contador es positivo, todo a la izquierda del delimitador final(contando desde la izquierda) se retorna. Si contador es negativos, todo a la derecha del delimitador final(contando desde la derecha) re retorna.
	EJEMPLO:
	select substring_index('www.mipagina.com','.',1);
	select substring_index('www.mipagina.com','.',2)

TRIM({[BOTH| LEADING| TRAILING]} FROM):Retorna la cadena cadena con todos los prefijo y/o sufijos sufijo eliminados.Si ninguno de los especificadores BOTH, LEADING, TRAILING, se asume BOTH.

Si sufijo es opcional y no se especifica, los espacios se eliminan.
	EJEMPLO:
	select trim('   bar   ');Eliminara los espacios de los costados
	select trim(LEADING 'x' from 'xxxbarxxx');Aqui quitara todas las x al principio
	select trim(BOTH 'x' from 'xxxbarxxx');Eliminara todas las x de ambos lados
	select trim(TRAILING 'xyz' from 'barxxyz');Eliminara todos los espacios despues de xyz

UCASE(cadena):Retorna la cadena cadena con todos los caracteres cambiados a mayusculas según el mapeo del conjunto de caracteres actual (por defecto es ISO-8859-1 Latin1)
	EJEMPLO:
	select ucase(descripcion) from productos;

UNCOMPRESS(cadena_comprimida):

UNCOMPRESSED_LENGTH(cadena_comprimida):

UNHEX(cadena):

UPPER(cadena):
