 CURSO BD CON ALEJANDRO GUZMAN


***************** Comandos para Crear DB *****************
CREATE database 'nombre de la base de datos';

	======= Para crear DB si no existe =======
CREATE database if not exists 'nombre BD'

***************** Usar nuestra DB *****************
USE 'nombre de la BD';

***************** VER TABLAS QUE CONTIENE DB *****************
SHOW TABLES;

Sintaxis para mostar solo el nombre:
SELECT COLUMN_NAME
     FROM INFORMATION_SCHEMA.COLUMNS
    WHERE table_name = 'tbl_name'
     [AND table_schema = 'db_name']
     [AND column_name LIKE 'wild']

SHOW COLUMNS
FROM tbl_name
[FROM db_name]
[LIKE 'wild']

***************** ELIMINAR DB *****************
DROP DATABASE 'nombre de BD a borrar';

***************** CREAR TABLAS EN LA BD *****************
USE 'nombre de la BD';

	CREATE TABLE 'nombre de la tabla'(
		 campo1 tipo(longitud),
		 campo2 tipo(longitud),
		 campo_n tipo(longitud)
	);

***************** ELIMINAR TABLAS EN LA BD *****************
DROP TABLE 'nombre de la tabla';

***************** TIPOS DE DATOS DE LAS COLUMNAS *****************
====TIPOS DE DATOS NUMERICOS
		1.-NUMERO ENTEROS
		2.-NUEMEROS FLOTANTE
	BIT-> [(Longitud)]entre 1 y 64, 1byte

	INT-> [(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(4 bytes). RANGO entre -2,147,483,648 y 2,147,483,647 con signo. LOnGITUD entre 0 y 4,294,967,295 sin signo

	NUMERIC->[(Longitud,decimales)][UNSIGNED][ZEROFILL]. Otro sinonimo de decimal

	TINYINT-> [(Longitud)][UNSIGNED][ZEROFILL], ENTERO(1 byte) longitud de-128 y 127 con signo.LONGITID de 0 a 255 sin signo
	INTEGER->[(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(4 bytes). RANGO entre -2,147,483,648 y 2,147,483,647 con signo. LOnGITUD entre 0 y 4,294,967,295 sin signo

	FIXED->[(Longitud,decimales)][UNSIGNED][ZEROFILL].Sinonimo de decimal.Numero con coma flotante. Longitud de -3.402823466 X 10 a la 38 hasta -1.175494351 X 10 a la -38 ó De 1.175494351 X 10 a la-38 hasta 3.402823466 X 10 a la 38

	BOOL,BOOLEAN->EQUIVALENTE ATINYINT(1), RANGO ENTRE0 Y 1.SE USA PARA FALSO(0) Y VERDADERO(1). 1 byte

	BIGINT->[(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(8 bytes). RANGO entre -9,223,372,036,854,775,807 y 9,223,372,036,854,775,806 con signo. LONGITUD entre 0 y 18,446,744,073,709,551,615 sin signo

	FLOAT

	SMALLINT-> [(Longitud)][UNSIGNED][ZEROFILL] TIPO ENTERO(2 byte). RANGO ENTRE -32,768 y 32,767 con signo, longitud entre0 y65,535 sin signo

	DECIMAL->[(Longitud,decimales)][UNSIGNED][ZEROFILL]. Numero con coma flotante.Longitud de hasta 65 digitos en la parte entera yhasta 30 digitos en la parte decimal(por defecto 0)

	DOUBLE-> [(Longitud,decimales)][UNSIGNED][ZEROFILL]. Numero con coma flotante(doble precisión). Longitud de -1.7976931348623157 X 10 a la 308 hasta -2.2250738585072014 X 10 a la -308 ó De 2.2250738585072014 X 10 a la -308 hasta 1.7976931348623157 X 10a la 308

	MEDIUMINT-> [(Longitud)][UNSIGNED][ZEROFILL], TIPO ENTERO(3 bytes), RANGO entre -8388608 y 8388607 con signo. Longitud entre 0 y2,294,967,295 sin signo

	DEC-> SINONIMO DE DECIMAL

	DOUBLE PRECISION-> SINONIMO DE DOUBLE

============TIPOS DE DATOS FECHA Y HORA===========
	DATE->Fecha con formato "YYYY-MM-DD". 3 bytes

	DATETIME->[(precisión)] Fecha y Horacon formato "YYYY-MM-DD HH:MM:SS.SSSSSS". El parametro precisión en la parte decimal de los segundos.5 bytes

	TIMESTAMP->[(precisión)].El parametro precisión representala cantidad de dígitos que se usarán para representar una fecha y hora desde 1970 hasta 2037. 4 bytes

	TIME->[(precisión)]. Hora, con formato "HH:MM:SS[precisión valores de SS]". 3 bytes.

	YEAR->Representa el año con formato de cuatro digitos "YYYY" o dos digitos "YY". 1 byte

===========TIPOS DE DATOS CADENA DE CARACTERES===========
	CHAR->[(longitud)]
		-Admite caracteres alfanumericos.
		-Longitud de 1 - 255 caracteres (por defecto 1)
		-Si se asigna una cadena de longitud menor,está se completará con espacios.
	VARCHAR->[(longitud)]
		-Similar a CHAR salvo que es necesario especificar la longitud y no seautorrellena con espacios.

	TINYTEXT->
		-Cadenas de longitud variable
		-Hasta 255 carácteres

	TEXT->
		-Cadenas de longitud variable
		-Hasta 65,535 carácteres (64k)

	MEDIUMTEXT->
		-Cadenas de longitud variable
		-Hasta 16,777,215 carácteres (16Mb)

	LONGTEXT->
		-Cadenas de longitud variable
		-Hasta 4,294,967,295 carácteres (4Gb)

===========TIPOS DE DATOS BINARIOS===========
	BLOB->
		-Objeto Binario que puede almacenar culquiertipo de información. Admite hasta 65,535 caracteres.64Kb

	TINYBLOB->
		-Es similar al BLOB
		-Hasta 255 bytes.

	MEDIUMBLOB->
		-Es similar al BLOB
		-Hasta 16Mb.

	LONGBLOB->
		-Es similar al BLOB
		-Hasta 4Gb


***************** MOSTRAR BD CON VARIANTES CREACION DE BD*****************
show databases like 'cli%';

CREATE database IF NOT EXISTS clientes CHARACTER SET=latin2;(No puede crear la BD por que ya existe)
SHOW WARNINGS;(Muestra Level, Code, Y el mensaje)
SHOW CREATE DATABASE clientes;(Para mostrar cual fue la sintaxis que se uso para la creación de la BD)


***************** MOSTRAR TABLA CON VARIANTES, CREACION DE TABLAS*****************

CREATE[TEMPORARY(permite crear una tabla temporal)]TABLE[IF NOT EXISTS]nombre_tabla
(
	**EN ESTA SECCION ES DONDE SE DEFINEN TODAS LAS COLUMNAS E INDICES QUE COMPONEN LAS TABLAS**

	nombre_columna definicion_Columna(tipo_dato,[NOT NULL | NULL],[DEFAULT{literal | (expr)}], [AUTO_INCREMENT], [UNIQUE[KEY]], [[PRIMARY]KEY], [COMMENT'string'])
	| {INDEX|KEY}[nombre_indice]
	[tipo_indice](columna_llave,...)[opciones_indice]...
)
[DEFAULT] CHARACTER SET[=]charset_name
COMMENT[=]'string'

EJEMPLO:

CREATE TABLE if not EXISTS cliente(

	num_cliente INTEGER NOT NULL AUTO_INCREMENT COMMENT 'Numero de Identificacion del cliente',
    nombre VARCHAR(30) NOT NULL COMMENT 'Nombre del cliente',
    direccion VARCHAR(30) NOT NULL COMMENT 'direccion para entrega de mercancia al cliente',
   	ciudad VARCHAR(20) NOT NULL COMMENT 'Nombre de la ciudad de ubicacion del cliente',
    telefono VARCHAR(15)NOT NULL COMMENT 'El numero telefonico del contacto',
    PRIMARY KEY (num_cliente) COMMENT 'Es el id de cada registro'

);

show columns from cliente; (Con esta instruccion podemos ver lo que creamos en la parte de arriba)
show full columns from cliente; (Con esta instruccion podemos ver la informacion completa que creamos en la parte de arriba)

//PARA VERISONES ANTERIORES A MySQL 8.0
CREATE TABLE IF NOT EXISTS factura
(
    num_factura INTEGER NOT NULL COMMENT 'numero unico de documento',
    num_cliente INTEGER NOT NULL COMMENT 'numero de identifiacion del cliente',
    fecha_factura DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'fecha del documento',
    valor_total MEDIUMINT UNSIGNED NOT NULL COMMENT 'valor total de la transaccion',
    PRIMARY KEY (num_factura) COMMENT 'el numero del documento debe ser unico',
    KEY (num_cliente) COMMENT 'es un indice de busqueda'
);

CREATE TABLE IF NOT EXISTS det_factura
(
	num_factura INTEGER NOT NULL COMMENT 'numero unico de documento',
    cod_producto SMALLINT UNSIGNED NOT NULL COMMENT 'numero de identificacion del producto',
    cant_vendida TINYINT UNSIGNED NOT NULL COMMENT 'cantidad de unidades compradas de este producto',
    valor_unitario SMALLINT UNSIGNED NOT NULL COMMENT 'valor unitariod e compra de este producto',
    PRIMARY KEY (num_factura,cod_producto) COMMENT 'solo un producto igual en cada documento',
    KEY (cod_producto) COMMENT 'indice de busqueda por codigo deproducto'
);

CREATE TABLE IF NOT EXISTS productos
(
    cod_producto SMALLINT UNSIGNED NOT NULL COMMENT 'numero de identificacion del proucto',
    descripcion VARCHAR(60) NOT NULL COMMENT 'descripcion completa del producto',
    precio_venta SMALLINT UNSIGNED NOT NULL COMMENT 'valor unitario de este productio hoy',
    PRIMARY KEY (cod_producto) COMMENT 'cada producto tiene un codigo unico',
    KEY (descripcion) COMMENT 'indice de busqueda por descripcion del producto'
    );


 **************** COMO VISUALIZAR EL ESQUEMA DE LA BD *************

 SHOW CREATE { DATABASE | SCHEMA }
 	[IF NOT EXISTS] nombre_basedatos

Ejemplo:

USE clientes;
SHOW CREATE DATABASE clientes;


******************************* COMO INSERTAR DATOS EN LA BD ****************************

INSERT INTO nombre_tabla(donde vas a insertar datos)
		(columna_1, columna_2,...columna_n)
			VALUES (valor_1,valor_2,...valor_n)
	[WHERE condición(opcional)]

EJEMPLO:
1)
INSERT INTO cliente (num_cliente,nombre,direccion,ciudad,telefono)
	VALUES(10,"Alejandro","Av. americas 78-90","bogota","+(57)304-6239358");

2)
INSERT INTO factura (num_factura,num_cliente,valor_total)
	VALUES(2543,10,12500);

3)
INSERT INTO productos (cod_producto,descripcion,precio_venta)
	VALUES(774878344,"tv 4k 65 pulgadas",10000);
4)
INSERT INTO det_factura (num_factura,cod_producto,cant_vendida,valor_unitario)
	VALUES(2543,774878344,1,10000);


******************************* SENTENCIA SELECT EN MySQL ****************************

SELECT [* | ALL | col1,col2,... coln]
	[INTO 'archivo_salida']
	 	FROM nombre_tabla[,nombre_tabla,...]
	[WHERE expresion_condicion]
	[GROUP BY columnas]
	[ORDER BY columnas[ ASC | DESC ]]
	[LIMIT #]

	FUNCIONES DE AGREGACION:
	-count:Devuelve el numero total de filas seleccionadas por la consulta.
	-min:Devuelve el valor minimo del campoque especifiquemos.
	-max:Devuelve el valor maximo del campoque especifiquemos.
	-sum:Suma los valores de los campos que especifiquemos(solo numeros)
	-avg:Devuelve el valor promedio de los campos que esecifiquemos(solo numeros)
		EJEMPLOS:
		-SELECT sum(valor_total)
		-SELECT count(*)
		-SELECT min(precio_venta)


******************************* ACTUALIZAR DATOS DE UNA TABLA ****************************

	UPDATE [LOW_PRIORITY][IGNORE] tabla
		SET columna=nuevo_valor
	  [WHERE condicion_seleccion]
		[LIMIT row_count]

EJEMPLO:

1)
UPDATE cliente SET nombre = "Alejandro Guzman" WHERE num_cliente = 10

2)
UPDATE factura,det_factura set det_factura.valor_unitario = det_factura.valor_unitario-500,factura.valor_total=factura.valor_total-500 WHERE det_factura.num_factura = factura.num_factura AND factura.num_factura = 2545 AND det_factura.num_factura = 2545;

	******************************* ELIMINAR REGISTROS DE UNA TABLA ****************************

DELETE [LOW_PRIORITY][QUICK][OGNORE]
	FROM tabla
	[WHERE condicion_seleccion]
	[ORDER BY columna]
	[LIMIT #]

EJEMPLO
1)
DELETE FROM cliente WHERE num_cliente = 20;


******************************* CONSULTA DE DATOS NO EXACTO DE UNA TABLA ****************************

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto = 775627384;

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto LIKE "%Videojuegos%";

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto NOT LIKE "%Videojuegos%";

SELECT * FROM productos WHERE cod_producto NOT LIKE "M%";

******************************* UNION DE TABLAS CON WHERE ****************************

EJEMPLO:
SELET ventas_Fecha AS 'Fecha',Ventas_NroFactura AS 'Nro. Factura',Ventas_CliID as 'ID Cliente',Cli_RazonSocial AS 'Razon Social',Ventas_Total AS 'Total' FROM ventas as v,clientes AS c WHERE v.Ventas_CliId=Cli_Id


******************************* FUNCIONES DE COMPARACION Y OPERADORES ****************************

BETWEEN ... AND
	Sintaxis -> expresión BETWEEN minimo AND máximo
	Ejemplo -> precio_venta BETWEEN 3000 AND 5000

función COALESCE()
	Sintaxis -> COALESCE(valor1,valor2,valor3,...) = Devuelve el primer valor NOT NULL de una lista o NULL si no hay valores
	Ejemplo -> SELECT nombre,COALESCE(num_factura) FROM clientes, factura WHERE factura.num_cliente =clientes.num_cliente

Operador <->(Seguro o igual a null)
	Sintaxis ->
	Ejemplo ->SELECT NULL <=> 1,NULL <=> NULL, 3 <=> NULL

Operador = (Igual a)
	Sintaxis -> Operador de Igual
	Ejemplo ->1=1,1=2,null=null,null=3,3=null;

Operador >= (Mayor o igual a):Comprueba si una expresion es igual o mayor que otra expresion.
	Sintaxis -> expresión >= valor
	Ejemplo ->precio_venta >=5000

Función GREATES():Devuelve el mayor de los argumentos dados, y devolver null si cualquiera de sus argumentos es null
	Sintaxis -> GREATES(valor1,valor2,...)
	Ejemplo -> SELECT GREATES(15,10,25);

Función IN():Encuentra una coincidencia de los argumentos dados y devuelve 1 si la expresion es igual a cualquiera de los valores de la lista IN, de lo contrario devolverá 0.
	Sintaxis -> expresion IN (value,...)
	Ejemplo ->SELECT num_cliente, nombre FROM cliente WHERE num_cliente IN (10,20)

Función INTERVAL():Devuelve el indice del argumento que es menor que el primer argumento. Devuelve 0 si el primer numero es menor que el segundo numero y 1 si el primer numero es menor que el tercer numero y asi de forma sucesiva. O devolvera -1 si el primer numero es NULL.Todos loas argumentos en está sentencia se tratan como numeros enteros.
	Sintaxis -> INTERVAL(N,N1,N2,N3,...)
	Ejemplo ->SELECT interval (85,1,75,17,30,56,175): Aquie devuelve el numero 5 que es la posicion

Operador IS NOT NULL:Verifica si un valor no es nulo
	Sintaxis -> SELECT 5 IS NOT NULL, 0 IS NOT NULL,NULL IS NOT NULL;
	Ejemplo -> SELECT * FROM productos WHERE descripcion IS NOT NULL;(traiga todos los productos cuya descripcion no sea nula)

Operador IS NOT:Este operador prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->select 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN,null IS NOT UNKNOWN;
	Ejemplo ->

Operador IS NULL:Prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;
	Ejemplo ->

Operador IS:Prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->SELECT 1 IS TRUE,0 IS FALSE,NULL IS UNKNOWN;
	Ejemplo ->

Función ISNULL():Devolvera un valor 1 cuando la expresion sea nula, de lo contrario siempre devolvera un valor 0.
	Sintaxis -> ISNULL(1+0), en este ejemplo devuelve 0 por que no es nulo.
	Ejemplo ->

Función LEAST():Devuelve el argumento mas pequeño de 2 o más argumentos.Si el argumento es NULL el resultado sera null. Si son valores enteros se compararan con valores enteros.Si se utiiza un cotexto de tipo realy todos los argumentos son de tipo real, se compararán de está forma.Si hay una combinacion de numeros y cadenas, se compararán como numeros.
	Sintaxis ->
	Ejemplo ->SELECT LEAST(15,10,25), aqui arrojara el numero 10 como resultado
			  SELECT LEAST("z","m","s"), aqui arrojara la letra m.

  			******************************* OPERADORES LOGICOS ****************************
En MySQL todos los operadores logico se valuan a TRUE, FALSE o NULL(UNKNOWN). Y se implementa de la siguiente forma:
	1->TRUE
	0->FALSE
	NULL

NOT ó !:
Ejemplos:
	SELECT NOT 10; 	-> 0
	SELECT NOT 0; 	-> 1
	SELECT NOT NULL; -> NULL
	SELECT ! (1+1); -> 0
	SELECT ! 1+1; 	-> 1

AND ó &&:Logica.Se evalua a 1 si todos los operadores sondistintos a cero y no NULL, a 0 si uno o más operandos son 0,de otro modo retorna null.
Ejemplos:
	SELECT 1 && 1; 	-> 1
	SELECT 1 && 0; 	-> 0
	SELECT 1 && NULL; -> NULL
	SELECT 0 && NULL; -> 0
	SELECT NULL && 0; 	-> 0

OR ó||:LOGICO. Cuando ambos operandos son no NULL, le resultado es 1 si algun operando es diferente a cero,y 0 de otro modo.Con un operando NULL el resultado es 1 si el otro operando no es cero,y NULL de otro modo.Si ambos operandos son NULL,el resultado es NULL.
Ejemplos:
	SELECT 1 || 1; 	-> 1
	SELECT 1 || 0; 	-> 1
	SELECT 0 || 0; 	-> 0
	SELECT 1 || NULL; -> 1
	SELECT 0 || NULL; -> NULL
	SELECT NULL || 0; 	-> 0

XOR:Logica.Retorna NULL si algún operando es NULL.Para operandos no NULL,evaluaa 1 si un numero par de operadores es distinto a cero,sino retorna 0.
Ejemplos:
	SELECT 1 XOR 1; 	-> 0
	SELECT 1 XOR 0; 	-> 1
	SELECT 1 XOR NULL; 	-> NULL
	SELECT 1 XOR 1 XOR 1; 	-> 1

******************************* FUNCIONES DE CONTROL DE FLUJO ****************************

CASE:Se basa en la evaluación de una expresion y cada valor posible se puede especificar en una clausula WHEN de forma independiente.Else puede eliminarse.
	CASE expresion
		WHEN valor THEN resultado
		. . .
		ELSE resultado
		END

	EJEMPLO:
	SELECT SUBSTR(descripcion,1,20),
	case count(*)
	when 1 then 1
	else "mas de 1"
	end as "cantidad"
	FROM productos
	GROUP BY 1;

IF:Permite evaluar una expresion y regresar un valor determinado cuandola expresion es verdadera.
	IF(expresion,
		resultado_true,
		resultado_false
	)
	EJEMPLO:
	SELECT descripcion, precio_venta,IF(precio_venta >= 10000,"Costoso","Economico") as Precio_Es FROM productos GROUP BY 1,2;
IFNULL:
	IFNULL(expresion,
		resultado
	)
	EJEMPLO:
	SELECT num_cliente,nombre,ifnull(pais,"pais no definido") FROM cliente;

NULLIF:Compara 2 expresiones y retorna null si ambas expresiones son exactamente iguales de lo contrario regresara la expresion original.
	NULLIF(
	expresion,
	expresion
	)
	EJEMPLO:
		SELECT descripcion,NULLIF(precio_venta,costo) as "sin utilidad" FROM productos;

		######################## FUNCIONES CON CADENAS ########################
ASC(cadena):Retorna el valor numerico del caracter mas a las izquierda de la cadena de caracteres cadena. Retorna 0 si cadena es la cadena vacia. Retorna NULL si cadena es NULL. ASCII() funciona para caracteres con valores numericos de 0 a 255.
	EJEMPLO:
	select ASCII(5);
	select ASCII("A");
	select ASCII('a');

BIN(numero):Retorna una representacion de cadena de caracteres del valor binario de numero,donde numero es un numero muy largo(BIGINT).
			Retorna NULL si numero es NULL. Convierte a binarios
	EJEMPLO:
	select BIN(1);
	select BIN(3);
	select BIN(4);

BIT_LENGTH(cadena):Retorna la longitud de la cadena de caracteres cadena en bits.(Cuantos bits ocupa
	EJEMPLO:
	select BIT_LENGTH('alejandro');
	select BIT_LENGTH('Texto un poco mas largo');

CHAR(numero,...):Interpreta los argumentos numero como enteros y retorna la cadena de caracteres que consiste en los caracteres dados por los codigos de tales enteros.Los valores NULL no se tienen en cuenta.
	EJEMPLO:
	select CHAR(77,121,83,81,76);(Equivale a la palabra MySQL en ASCII)

CHAR_LENGTH(cadena):Retorna la longitud de la cadena de caracteres cadena, medida en caracteres. Un caracter demultiples bytes cuenta como un solo caracter. Esto significa que para una cadena de caracteres que contiene cinco caracteres de dos bytes,LENGTH() retorna 10, mientras CHAR_LENGTH() retorna 5.
	EJEMPLO:
	select CHAR_LENGTH("ALEJANDRO");(Devuelve el numero 9, por el conteo de caracteres)

CHARACTER_LENGTH(cadena):

COMPRESS(cadena):Comprime una cadena de caracteres.Esta funcion necesita que MySQL se compile con una biblioteca de comprension como zlib. De otro modo, el valor retornado siempre es null. la cadena comprimida puede descomprimirse con UNCOMPRESS().

Los contenidos comprimidos se almacenan de al siguiente forma:
Cadenas vacias se almacenan como cadenas vacias.
Cadenas no vacias se almacenan como lomgitud de cuatro bytes de la cadena descomprimida(los bytes más bajos primero),seguido de lacadena comprimida. Si la cadena acaba con un espacio, se añade un caracter '.' para evitar problemas con eliminacion de espacios finales al almacenar en una columna CHAR o VARCHAR.(El uso de CHAR o VARCHAR para almacenar cadenas comprimidas no se recomienda. Es mejor usar una columna BLOB)
	EJEMPLO:
		insert into productos values(778123894,compress("control remoto"),300,250);

CONCAT(cadena1, cadena2,...):Retorna la cadena resultado de concatenar los argumentos
	EJEMPLO:
			select concat(cod_producto," es ",descripcion) as listado FROM productos;

CONCAT_WS(separador, cadena1,cadena2 ,...):Significa CONCAT WITH Separator(CONCAT con separador) y es una forma especial de CONCAT(). EL primer argumento es el separador para el resto de argumentos.El separador se añade entre las cadenas a concatenar.El separador puede ser una cadena como el resto de los argumentos. Si el separador es NULL, el resultado es NULL.La funcion evita valores NULL tras el argumento separador.
	EJEMPLO:
			select concat_ws(" | ",cod_producto,descripcion,costo,precio_venta) as datos FROM productos;

CONV(numero,de_base_a_base):Convierte numeros entre diferentes bases numericas. Retorna una presentacion de cadena de caracteres para el numero numero,convertido en base origen a base destino. Retorna NULL si algun argumento numero se interpreta como entero.
	EJEMPLO:
	select conv(cod_producto,10,16) as hexadecimal,descripcion from productos;(Convierte de base 10 a Hexadecimal[Base 16])

ELT(numero,cadena1,cadena2,...):Retorna cadena1 si numero = 1,cadena2 si numero= 2,y asi sucesivamente. Retorna NULL si numero es menor que 1 o mayor que el numero de argumentos.
	EJEMPLO:
	select elt(1,"Primero","Segundo","Tercero") as Ordinal;

EXPORT_SET(bits,on,off,separador,#bits):Retorna una cadena en que para cada bit del valor bits,puede obtener una cadena on y para cada bit reasignado obtiene una cadena off.Los bits en bits se examinan de derecha a izquierda (de bots menores a mayores).Las cadenas se añaden al resultado de isquierda a derecha, separados por la cadena separador(siendo el carácter por defecto la coma ',').El número de bits examinados se obtiene por numbre_of_bits(por defecto 64).
	EJEMPLO:
	select export_set(5,'Y','N','-',4);

FIELD(buscar,cadena1,cadena2,...):Retorna el indice de buscar en la lista cadena1,cadena2,...Retorna 0 si no se encuentra buscar.
Si todo los argumentos de FIELD() son cadenas, todos los argumentos se comparan como cadens. Si todos los argumentos son números, se comparan como números.De otro modo, los argumentos se comparan como números con doble precisión.
Si buscar es NULL, el valor retornado es 0 porque NULL falla en comparaciones de comparación con cualquier valor,FIELD() es el complemento de ELT().
	EJEMPLO:
	select field("ALE","AGC","ALE","ALEGUZMAN") as encontrado;
	select field("Consola Videojuegos Play 4",descripcion) as Encontrado,cod_producto from productos;

FIND_IN_SET(cadena,lista_cadena):Retorna un valor en el rango de 1 a N si la cadena buscar está en la lista de cadenas lista_cadena consistente de N subcadenas. Una lista de cadenas es una cadena compuesta de subcadenas separadas por caracteres','.Si el primer argumento es una cadena constante y el segundo es una columna de tipo SET, la función FIND_IN_SET() está optimizada para usar artimética de bit. Retorna 0 si buscar no está en lista_cadena o si lista_cadena es la cadena vacía. Retorna NULL si algún argumento si el primer argumento contiwnw un cáracter de coma(',').
	EJEMPLO:
	select find_in_set("Guzman","Alejandro,Guzman,Castellanos") as Encontrado;

HEX(numero_o_cadena):Si numero_o_cadena es un número, retorna una cadena de representación del valor hexadecimal de numero, donde numero es un número muy grande (BIGINT).Esto es equivalente a CONV(N,10,16).

Si numero_o_cadena es una cadena,esta función retorna una cadena hexadecimal de cadena caracteres, donde cada carácter en cadena se convierte a dos dígitos hexadecimales.
	EJEMPLO:
	select hex("alejandro") as resultado;
	select 0x616C656A616E64726F as resultado;
FIND_IN_SET(cadena,lista_cadena):

INSERT(cadena,pos,longitud,nuevacadena):Retorna la cadena cadena, con la subcadena comenzando en la posición pos y longitud caracteres reemplazados por la cadena nuevacadena. Retorna la cadena original si pos no esta entre la longitud de la cadena. Remplaza el resto de la cadena a partir de la posición por su longitud no está dentro de la longitud del resto de la cadena. Retorna NULL si cualquier argumento es nulo.
	EJEMPLO:
	select insert(descripcion,9,0,"en oferta - ") from productos where descripcion like "Consola%";

INSTR(cadena,subcadena):Retorna la posición de la primera ocurrencia de la subcadena subcadena en la cadena cadena.
	EJEMPLO:
	select instr(descripcion,"Videojuegos") as resultado, cod_producto from productos;

LCASE(cadena)
LOWER(cadena):Retorna la cadena cadena con todos los caracteres cambiadosa minuscula segun el mapeo del conjunto de caracteres actual(por defectos es ISO-8859-1 Latin1)
	EJEMPLO:
	select lower(descripcion) from productos;

LEFT(cadena,longitud):Retorna los longitud caracteres empezando por la izquierda de la cadena cadena.
	EJEMPLO:
	select left(descricpion,8) as abreviado from productos;

LENGTH(cadena):Retorna la longitud de la cadena cadena, medida en bytes.Un caracter multi-byte cuenta como múltiples bytes. Esto siginifica que para cadenas que contengan cinco caracteres de dos bytes, LENGTH() retorna 10, MIentras que CHAR_LENGTH() retorna 5.
	EJEMPLO:
	select cod_producto, length(descripcion) as longitud from productos;

LOAD_FILE(archivo):Lee el archivo y retorna el contenido como cadena de caracteres. El archivo ebe estar localizado en el servidor, debe especificar la ruta completa al archiv, y dene tener el privilegio FILE. El archivo debe ser legible por todo el mundo y su tamaño menor a max_allowed_packet bytes.

Si el archivo no existe o no puede ser leido debido a que una de las anteriores condiciones no se cumple, la funcion retorna NULL.
	EJEMPLO:
	alter table 'productos' add 'caracteristicas' BLOB NULL default NULL;

	update productos set caracteristicas=load_file("ps4.txt") where cod_producto =773819011;

LOCATE(subcadena,cadena)
LOCATE(subcadena,cadena,[posicion]):La primera retorna la posicion de la primera ocurrencia de la subcadena subcadena en la cadena.
	La segunda sintacis retorna la posición de la primera ocurrencia de la subcadena subcadena en la cadena cadena, comenzando en la posición posicion. Retorna 0 si subcadena no está en cadena.
	SINTAXIS:
	LOCATE(subcadena, cadena)
	 POSITION(subcadena IN cadena)
	INSTR(cadena, subcadena)

	Observa que la sitaxis 1 es muy parecida a la función INSTR que vimos hace un momento, sin embargo, los argumentos están invertidos.
	LOCATE y POSITION son sinónimos.
	EJEMPLO:
	select locate ("videojuegos", descripcion) as busqueda, cod_producto from productos;

LPAD(cadena,longitud,cadenapad):Retorna la cadena cadena,alineado a la isquierda con la cadena cadenapad a una longitud de longitud caracteres.Si cadena es mayor que longitud, el valor retornado se acorta a longitud caracteres.
	EJEMPLO:
	select LPAD('que tal',12,'Hola ');
LTRIM(cadena):Retorna la cadena cadena con los caracteres en blanco iniciales eliminados. Se puede utilizar para ajustar números a la izquierda en la salida del select.
	EJEMPLO:
	select ltrim("	Cadena de texto");Limpia el texto
	select ltrim(cod_producto) from productos;

MAKE_SET(bits,cadena1,cadena2,...):Retorna un conjunto de valores (una cadena conteniendo subcadenas separadas por caracteres ',') consistiendo en cadenas que tienen el bit correspondiente en bits asignado. cadena1 se corresponde el bit 0, cadena2 al bit 1, y así. 	Los valores NULL en caena1, cadena2, ... no se añaden al resultado.
	EJEMPLO:
	select make_set(1|8, 'hola','buenos','dias','mundo');

MID(cadena,posicion,longutud)

SUBSTRING(cadena,pos)
SUBSTRING(cadena FROM posicion)

SUBSTRING(cadena,posicion,longitud)
SUBSTRING(cadena FROM posicion FOR longitud)
La forma de está sintaxis sin el argumento longitud(las que no tienen) regresan una subcadena de la cadena especificada en el parametro cadena, comenzando en la posicion indicada en posicion.

Y las que tengan longitud regresan como resultado una longitud especificada en longitud a partir de la cadena especificada comenzando en la posicion indicada en el parametro posicion

Las formas que usan el FROM son sintaxis SQL estandard. En MySQL 5.0. es posible usar valores negativos para posicion. En este caso, el inicio de la subcadena son posicion caracteres a partir del final de la cadena, enlugar del principio.

Un valor negativo puede usarse para posicion en cualquier de las formas de está función.
	EJEMPLO:
	select substring(descripcion,5) as reducido from productos;

OCT(numero):Retorna una representación en cadena del valor octalde numero,donde numero es un numero largo(BIGINT). Retorna NULL si numer es NULL.
	EJEMPLO:
	select oct(cod_producto), descripcion from productos;

OCTET_LENGTH(cadena):

ORD(cadena):Si el caracter más a la izquierda de la cadena cadena es un carácter multi-byte, retorna el código d ese carácter, calculado a partir del valor numérico de sus bytes usando esta fórmula:
(1st byte code)
+(2nd byte code * 256)
+(3rd byte code * 2562)...

Si el caracter más al a izquierda no es multi-byte, ORD() retorna el mismo valor que la función. ASCCII().
	EJEMPLO:
	select ORD(descripcion) from productos;

POSITION(subcadena IN cadena):

QUOTE(cadena):Acota una cadena para producir un resultado que puede usarse como un valor con caracteres de escape en un comando SQL.La cadena se retorna rodeado por comillas sencillas y con cada instancia de comillas sencilla(' ' '), antibarra('\'), ACII NUL, y control-Z predecidos por una antibarra.

Si el argumento es NULL, el valor de retorno es la palabra "NULL" sin comillas alrededor.
	EJEMPLO:
	select quote ("Don't do that.");Encapsula el caracter especial

REPEAT(cadena,contador):Retorna una cadena consistente de la cadena repetida cantidad veces. SI cantidad <=0.Retorna una cadena vacía. Retirna NULL si cadena o cantidad son NULL.
	EJEMPLO:
	select repeat("Hola",5);
	select repeat("*",40);

REPLACE(cadena,de_cadena,a_ cadena):Retorna la cadena cadena contodas las ocurrencias de la cadena de_cadena remplazadas con la cadena a_cadena.
	EJEMPLO:
	select replace(descripcion, "VideoJuegos","Gamer") from productos;

REVERSE(cadena):Retorna la cadena cadena con el orde de los caracteres invertidos.
	EJEMPLO:
	select cod_producto, reverse(descripcion) from productos;

RIGHT(cadena,longitud):Retorna los caracteres del lado derecho de la cadena cadena.
	EJEMPLO:
	select cod_producto, right(descripcion, 7) from productos;

RPAD(cadena,longitud,cadenapad):Retorna la cadena cadena, alineada a la derecha con la cadena cadenapad con una longitud de longitud caracteres. Si cadena es mayor que longitud, el valor de retorno se corta a longitud caracteres.
	EJEMPLO:
	select rpad(decripcion,40," *oferta* ") from productos;

RTRIM(cadena):Retorna la cadena cadena con los espacios precedentes eliminados.
	EJEMPLO:
	select rtrim('Texto con espacio a la derecha');

SOUNDEX(cadena):Retorna una cadena soundex de cadea. Dos cadenas que suenen igual deben tener cadenas soundex idénticas. Una cadena soundex estándar tienen cuatro caracteres de longitud, pero la función SOUNDEX() retorna una cadena arvitrariamente larga.

Puede usar SUBSTRING() en el resultado para obtener una cadena soundex estandar. Todos los caracteres no alfabeticos en cadena se ignoran. Todos los caracteres alfabeticos internacionales fuera de rango A-Z se tratan como vocales.
	EJEMPLO:
	select cod_producto, soundex(descripcion) from productos;

SPACE(numero):Retorna la cadena consistente en numero caracteres blancos.
	EJEMPLO:
	select space(10),descripcion from productos where descripcion li "Consola%";
	select concat(space(10),descripcion) from productos where descripcion like "Consola%"


SUBSTRING(cadena,posicion[,longitud]):


SUBSTRING_INDEX(cadena,delimitador,cont):Retorna la subcadena de la cadena cadena antes de contador ocurrencias del delimitador delimitador.Si contador es positivo, todo a la izquierda del delimitador final(contando desde la izquierda) se retorna. Si contador es negativos, todo a la derecha del delimitador final(contando desde la derecha) re retorna.
	EJEMPLO:
	select substring_index('www.mipagina.com','.',1);
	select substring_index('www.mipagina.com','.',2)

TRIM({[BOTH| LEADING| TRAILING]} FROM):Retorna la cadena cadena con todos los prefijo y/o sufijos sufijo eliminados.Si ninguno de los especificadores BOTH, LEADING, TRAILING, se asume BOTH.

Si sufijo es opcional y no se especifica, los espacios se eliminan.
	EJEMPLO:
	select trim('   bar   ');Eliminara los espacios de los costados
	select trim(LEADING 'x' from 'xxxbarxxx');Aqui quitara todas las x al principio
	select trim(BOTH 'x' from 'xxxbarxxx');Eliminara todas las x de ambos lados
	select trim(TRAILING 'xyz' from 'barxxyz');Eliminara todos los espacios despues de xyz

UCASE(cadena):Retorna la cadena cadena con todos los caracteres cambiados a mayusculas según el mapeo del conjunto de caracteres actual (por defecto es ISO-8859-1 Latin1)
	EJEMPLO:
	select ucase(descripcion) from productos;

UNCOMPRESS(cadena_comprimida):Descomprime una cadena_comprimida con la función COMPRESS(). Si el argumento no es un valor comprimido, el resultado es NULL.
	EJEMPLO:
	update productos set deescripcion=compress(descripcion) where cod_producto = 773819011;
	select descripcion from productos where cod_producto = 773819011;

	select uncompress(descripcion) from productos where cod_producto =773819011;

UNCOMPRESSED_LENGTH(cadena_comprimida):Retorna la longitud de cadena_comprimida antes de la compresión.
	EJEMPLO:
	select uncompress_length(descripcion) from productos where cod_producto =773819011;
	select lenght(descripcion) from productos where cod_producto = 773819011;

UNHEX(cadena):Realiza la operación apouesta a HEX(cadena).ESto es, interpreta cada par de dígitos hexadecimales en el argimento como números y los convierte al carácter representado por el número. El caracteres resultantes se retorna como cadena binaria.
	EJEMPLO:
	select unhex("545620346B2036352070756C6761646173");Regresara una cadena de forma correcta

UPPER(cadena):Retorna la cadena cadena especificada con todos los caracteres cambiado a mayusculas segun el mapeo del conjunto de caracteres actual(por defecto es ISO-8859-1 Latin1)
	EJEMPLO:
	select UPPER(descripcion) from productos;igual que UCASE()

				######################## FUNCIONES MATEMATICAS ########################

TODAS LAS FUNCIONES MATEMATICAS RETORNARÁN NULL EN CASO DE ESTAR MAL.

ABS(X):Retorna el valor absoluto de x.Esta funcion puede usar valores BIGINT
	EJEMPLO:
	select abs(2);
	select abs(-32);

ACOS(X):Retorna el ARCOSENO de x,esto es, elvalor cuyo coseno es x.Retorna NULL si x no está en el rango -1 a 1.
	EJEMPLO:
	select acos(1);

ASIN(X):Retorna el arcoseno de x,esto es, el valor cuyo seno es x.Retorna NULL si x noestña en el rango de -1 a 1.

ATAN(X):Retorna la arcotangente de x, estos es, el calor cuya tangente es x.Y la forma de usuarlas es la siguiente:
	ATAN(y,x)		ATAN2(y,x)
	Regresa la arcotangente de las variables X y Y. Es similar a calcular la arcotangente de y/x, excepto que los signos de ambos argumentos se usan para determinar el cuadrante del resultado.

CEILING(X) CEIL(X):Retorna el entero más pequeño no menos a x. Estas dos funciones son sinónimos. Tenga en cuenta que el valor retornado se convierte a BIGINT.
	EJEMPLO:

COS(X):Retorna el coseno de x, donde x se da en radianes.

COT(X):Retorna la cotangente de x.

CRC32(EXP):Computa un valor de redundancia cíclica y retorna el valor sin signo de 32 bits. El resultado es NULL si el argumento es NULL. Se espera que el argumento sea una cadena y(si es posible) se trata como una si no lo es.
	EJEMPLO:
	select crc32('MySQL');

DEGREES(x):Retorna el argumento x, convertido de radianes a grados.

EXP(x):Retorna el valor de e(labase del logaritmo natural) a la potenia de x.

FLOOR(x):Retorna el valor entero más grande pero no mayor a x.

LN(x):Retorna el logaritmo natural de x, estos es, el logaritmo de x base e.

LOG(x) LOG(b,x):Tiene dos forma, como están anteriormente. Retorna el logaritmos natural de x, estos es, el logaritmo de x base e. Si se llama con dos parámetros, esta función retorna el logaritmo de x para una base arbitrária b.

LOG2(x):Retonra el logaritm en base 2 de x. LOG2() es útil para encontrar cuántos bits necesita un número para almacenamiento. Está función es equivalente a la expresió LOG(X) / LOG(2).

LOG10(x):Retorna el logaritmo en base 10 de x.

MOD(n,m) n%m nMODm:Operación de módulo. Retorna el resto de n dividido por m.Está función puede usar valores BIGINT. MOD() también funciona con valores con una parte fraccional y retorna el resto exacto tras la divisón.

PI():Retorna el valor de pi. El número de decimales que se muestra por defecto es siete, pero MySQL usa internamente el valor de doble precisión entrero.
	EJEMPLO:
	select pi();
	select pi()+0.0000000000000000000;

POW(x,y) POWER(x,y):Retorna el valor de x a la potencia de y.
	EJEMPLO:
	SELECT pow(2,3);Retorna 8
	SELECT pow(2,-2);Retorna 0.25

RADIANS()x:Retorna el argumento x,convertido de grados a radianes.(Tenga en cuenta  que pi radianes sin 180 grados)

RAND() RAND(n):Retora un valor aleatorio en coma flotante del rango de 0 1 1.0. Si se especifica un argumento entero n, se usa como semilla, que produce una secuencia repetible. Hay que tener en cuenta que RAND() en una clausula WHEREse re-evalua cada vez que se ejecuta el WHERE.

RAND() No pretende ser un generador de números aleatorios perfectos, pero es una forma rápida de generar números aleatorios ad hoc portable entre plataformas para la misma versión de MySQL.
	EJEMPLO:
	select rand();
	select rand(20);

ROUND(x) ROUND(x,d):Retorn el argumento x, redondeando al entero más cercano. Con 2 argumentos, retorna x redondeando a d decimales. d Puede ser negativo para redondear d dígitos a la izquierda del punto decimal del valor x.
	EJEMPLO:
	select round(-1.23);Redondea a -1
	select round(-1.58);Redondea a -2

SIGN(x):Retorna el signo del argumento como -1,0, o 1, en funcion de si x es negativo, cero o positivo.
	EJEMPLO:
	select sign(-32);Regresa -1
	select sign(0);Regresa 0
	select sign(32);Regresa 1

SIN(x):Retorna el seno de x, donde x se da en radianes.
	EJEMPLO:
	select sin(pi());

SQRT(x):Retorna la raíz cuadrada de un número no negativo x.
	EJEMPLO:
	select sqrt(4);
	select sqrt(20);raiza cuadrado

TAN(x):Retorna la tangente de x, donde x se da en radianes.
	EJEMPLO:
	select tan(pi());

TRUNCATE(x,d):Retorna el número x, truncado a d decimales. Si d es 0, el resultado no tiene punto decimal o parte fraccional. d puede ser negativo para truncar(hcer cero) d dígitos a la izquierda del punto decimal del valor x.
	EJEMPLO:
	select truncate(1.223,1);Truncara el valor a 1 decimal

		######################## FUNCIONES FECHA ########################

1.-ADDDATE():Adiciona intervalos de hora/fecha a una fecha y devuelve una fecha. Agregar valores de tiempo a un valor de fecha.
	Sintaxis1: select adddate(fecha,INTERVAl expresión(numerica) unidad(puede ser DAY, WEEK,MONTH,YEAR))
	Sintaxis2: select adddate(fecha,dias)
	EJEMPLO:
	select adddate('2020-03-25',INTERVAL 12 DAY);
	select adddate('2020-03-25',INTERVAL 4 WEEK)
	select adddate('2020-03-25',INTERVAL 2 MONTH);
	select adddate('2020-03-25',INTERVAL 1 YEAR);
	select adddate('2020-03-25',INTERVAL 1 YEAR);
	select adddate('2020-03-25',8);

2.-ADDTIME():Adiciona intervalos de hora a una fecha/hora y devuelve una hora/fechahora
	Sintaxis: SELECT ADDTIME(expr1(HH:MM:SS.cc),expr2(AAAA-MM-DD HH:MM:SS.ccc))
	EJEMPLO:
	SELECT ADDTIME('2020-03-25 09:45:20','23:05:10');
	SELECT ADDTIME('09:45:20','00:14:10');


3.-CONVERT_TZ():Permite convertir fecha/hora de una zona horaria a otra.
	Sintaxis: SELECT CONVERT_TZ(fechahora(AAAA-MM-DD HH:MM:SS.ccc),de_tz{+ | -}, a_tz{ 00:00 })
	EJEMPLO:
	SELECT CONVERT_TZ('2020-03-25 09:35:00','-05:00','+00:00');

4.-CURDATE():Retorna la fecha actual del sistema.
	Sintaxis1:SELECT CURDATE();
	Sintaxis2:SELECT CURDATE()+0;
	EJEMPLO:
	select curdate();
	select curdate() + 0;

5.-CURRENT_DATE():Sinónimo de CURDATE().
	Sintaxis1:SELECT CURRENT_DATE();
	Sintaxis2:SELECT CURRENT_DATE()+0;
	EJEMPLO:
	select current_date();
	select current_date() + 1;


6.-CURRTIME():Retorna la hora actual del sistema.
	Sintaxis1: SELECT CURTIME();
	Sintaxis2: SELECT CURTIME() + 0;
	EJEMPLO:
	select curtime();
	select curtime() + 0;

7.-CURRENT_TIME():Sinónimo de CURRTIME().
	Sintaxis1: SELECT CURRENT_TIME();
	Sintaxis2: SELECT CURRENT_TIME() + 0;
	EJEMPLO:
	select current_time();
	select current_time() + 0;


8.-CURRENT_TIMETAMP():Retorna la fecha y hora actual del sistema. Es un sinonimo para NOW() que se vera más adelante.
	Sintaxis1: SELECT CURRENT_TIMETAMP();
	Sintaxis2: SELECT CURRENT_TIMETAMP() + 0;
	EJEMPLO:

9.-DATE():Extrae la parte de fecha de una expresión de fecha o fecha y hora.
	Sintaxis1:SELECT DATE('2020-03-25 08:38:25');
	EJEMPLO:
	select date('2020-03-25 08:38:25');

10.-DATE_ADD():Agregar valores de tiempo (Intervalos) a un valor de fecha. Esta función es sinónimo de ADDDATE().
	Sintaxis1:SELECT DATE_ADD(fecha(AAAA-MM-DD), INTERVAL expresión(# # #) unidad(puede ser DAY, WEEK,MONTH,YEAR));
	Sintaxis2:SELECT DATE_ADD(fecha,dias);
	EJEMPLO:
	select date_add('2020-03-25',INTERVAL 12 DAY);
	select date_add('2020-03-25',INTERVAL 4 WEEK);
	select date_add('2020-03-25',INTERVAL 2 MONTH);
	select date_add('2020-03-25',INTERVAL 1 YEAR);

11.-DATE_FORMAT():Formato de fecha como se especifica.
	Sintaxis1:SELECT DATE_FORMAT(fecha(AAAA-MM-DD),formato(%a,%b,%c,...));
		%a Abreviatura del nombre del dia de la semana
		%b Abreviatura del nombre del mes
		%D Día del mes con sufijo en ingles
		%d Dia del mes, numero (00..31)
		%e Dia del mes, numero (0..31)
		%f Microsegundos (000000..999999)
		%H Horas (00..23)
		%h Horas (01..12)
		%I Horas (01..12)
		%i Minutos, numérico (00..59)
		%k Horas (0..23)
		%l Horas (1..12)
		%j Dia del año (001..366)
		%M Nombre del mes (January...December)
		%m Mes, numérico(01..12)
		%p am / pm
		%r Hora en formato 12, seguido de am/pm
		%S o %s Segundos (00..59)
		%T Hora, formato 23 horas, hh:mm:ss
		%U Semana, Domingo como primer dia de la semana
		%u Semana, Lunes como primer dia de la semana
		%V Semana (01..53) Domingo primer dia, con %X
		%v Semana (01..53) Lunes primer dia, con %x
		%W Nombre dia de la semana (Sunday...Saturday)
		%w Dia de la semana (0=Domingo, 6=Sabado)
		%X Año para la semana, Domingo primer dia de la semana, numerico, 4 dígitos, con $V
		%x Año para la semana, Lunes primer dia de la semana, numérico, 4 dígitos, con %v
		%Y Año, númerico, 4 dígitos
		%y Año, numérico, 2 dígitos
		%% Un carácter literal %
	EJEMPLO:
	select date_format('2020-03-25','%a');
	select date_format('2020-03-25 18:30:25','%W %D %M %Y %h:%i%p');Regresa Wednesday 25th March 2020 06:30PM

12.-DATE_SUB():Resta un valor de tiempo (intervalo) de una fecha.
	Sintaxis: SELECT DATE_SUB(fecha[AAAA-MM-DD],INTERVAL expresión[# # #] unidad[DAY, WEEK, MONTH, YEAR])
	EJEMPLO:
	select date_sub('1998-01-02', INTERVAL 31 DAY);->Le quita 31 dias y muestra fecha del mes pasado.

13.-DATEDIFF():Resta dos fechas. Devuelve fecha1-fecha2 expresado como valor en días desde una fecha a la otra. fecha1 y fecha2 son expresiones de fecha o fecha y hora. Solo las partes de fecha de los valores se utilizan en el cálculo.
	Sintaxis: SELECT DATEDIFF(fecha1,fecha2)
	EJEMPLO:
	select datediff('2020-03-25','2020-04-18');Muestra la diferencia en días

14.-DAY():Sinónimo de DAYOFMONTH(). Devuelveel día del mes para la fecha, en el rango de 1 a 31.
	Sintaxis: SELECT DAY(fecha[AAAA-MM-DD])
	EJEMPLO:
	select day('2020-03-25');

15.-DAYNAME():Devuele le nombre del dia de la semana.
	Sintaxis: SELECT DAYNAME(fecha[AAAA-MM-DD])
	EJEMPLO:
	select dayname('2020-04-27');Muestra el día en ingles de la semana

16.-DAYOFMONTH():Sinonimo de DAY().Devuelve el día del mes para la fecha, en el rango de (0-31).
	Sintaxis: SELECT DAYOFMONTH(fecha[AAAA-MM-DD])
	EJEMPLO:
	select dayofmonth('2020-03-25');

17.-DAYOFWEEK():Devuelve el índice del día de la semana para la fecha.En ingles (1=domingo,2=lunes, ...,7=sábado).Estos Valores de índice corresponden al estándar ODBC.
	Sintaxis: SELECT DAYOFWEEK(fecha[AAAA-MM-DD])
	EJEMPLO:
	select dayofweek('2020-03-25');

18.-DAYOFYEAR():devuelve el díe del año (1-366).
	Sintaxis: SELECT DAYOFYEAR(fecha[AAAA-MM-DD])
	EJEMPLO:
	select dayofyear('2020-03-25');

19.-MAKEDATE():Crear una fecha del año y día del año.
	Sintaxis:SELECT MAKEDATE(año[AAAA],días)
	EJEMPLO:
	select makedate(2020,10);
	select makedate(2020,55);
	select makedate(2020,83);

20.-MAKETIME():Crea una hora(tiempo) desde hora, minuto, segundo.
	Sintaxis:SELECT MAKETIME(horas[##],minutos[##],segundos[##]);
	EJEMPLO:
	select maketime(12,25,38);
	select maketime(18,40,05);

21.-MICROSECOND():Devuelve los microsegundos del argumento
	Sintaxis: SELECT MICROSECOND('expresion[AAAA-MM-DD HH:MM:SS.ccc]');
	EJEMPLO:
	select microsecond('12:05:00.28743');Solo trae los microsegundos
	select microsecond('18:10:02.12');

22.-MINUTE():Devuelve el minuto del argumento.
	Sintaxis: SELECT MINUTE('expresion[AAAA-MM-DD HH:MM:SS.ccc]');
	EJEMPLO:
	select minute('2020-05-12 10:05:03');Devuelve los minutos

23.-MONTH():Devuelve el mes desde la fecha argumento
	Sintaxis: SELECT MONTH('fecha[AAAA-MM-DD]');
	EJEMPLO:
	select month('2020-04-29');Muestra el mes 4

24.-MONTHNAME():Devuelve el nombre del mes del argumento.
	Sintaxis:SELECT MONTHNAME('fecha[AAAA-MM-DD]');
	EJEMPLO:
	select monthname('2020-04-25');Mostrara como resultado April
	select monthname('2020-07-10');

25.-NOW():Devuelve la fecha y hora actuales.
	Sintaxis1:SELECT NOW();
	Sintaxis2:SELECT NOW()+0;
	EJEMPLO:
	select now();
	select now() + 0;

26.-PERIOD_ADD():Agrega 'n' meses a un periodo (en el formato AAMM 0 AAAAMM).Devuelve un valor en el formato AAAAMM
	Sintaxis:SELECT PERIOD_ADD(periodo[AAAAMM],meses[##])
	EJEMPLO:
	select period_add(202004,5);
	select period_add(202004,20);

27.-PERIOD_DIFF():Devuelve la diferencia entre 2 periodos, especificados cada uno como AAAAMM.
	Sintaxis:SELECT PERIOD_DIFF(periodo-inicial[AAAAMM],periodo-final[AAAAMM])
	EJEMPLO:
	select period_diff(202012,202004);

28.-QUARTER():Devuelve el trimestre de un argumento de fecha
	Sintaxis:SELECT QUARTER('fecha[AAAA-MM-DD]');
	EJEMPLO:
	select quarter('2020-04-01');Muestra el trimestre que corresponde al año
	select quarter('2020-12-01');

29.-SEC_TO_TIME():Convierte segundos a formato 'hh:mm:ss'. Devuelve el argumento segundos, convertidos a horas, minutos y segundos, como un valor tiempo. El tango del resultado está limitado al del tipo de datos TIME.Se produce una advertencia si el argumento corresponde a un valor fuera de ese rango.
	Sintaxis:SELECT SEC_TO_TIME(segundo[###]);
	EJEMPLO:
	select sec_to_time(360);
	select sec_to_time(360) + 0;

30.-SECOND():Devuelve el segundo(0-59) pra el argumento, en el rango de 0 a 59.
	Sintaxis:SELECT SECOND(hora[HH:MM:SS])
	EJEMPLO:
	select second('10:28:03');Devuelve solo los segundos

31.-STR_TO_DATE():Convierte una cadena en una fecha.Esta es la inversa de la función DATE_FORMAT().Recibe como parametros una "cadena" y un "formato".STR_TO_DATE() devuelve un valor DATETIME si el "formato" contiene partes de fecha y hora,o un valor DATE u TIME si la "cadena" contiene solo partes de fecha u hora. Si el valor de fecha, hora o fecha y hora extraído de "cadena" es legal, STR_TO_DATE() devuelve NULL y genra una advertencia.
	Sintaxis:SELECT STR_TO_DATE('cadena','formato');
	EJEMPLO:
	select str_to_date('1,5,20','%d,%m,%Y');
	select str_to_date('May 1,2020','%M,%d,%Y');

32.-SUBDATE():Sinónimo de DATE_SUB() cuando se invoca con la forma INTERVAL del segundo argumento.
	Sintaxis:SELECT SUBDATE('fecha'[AAAA-MM-DD],INTERVAL expresion[# # #] formato[DAY, WEEK, MONTH,YEAR]);
	EJEMPLO:
	select subdate('2020-05-01',INTERVAL 31 DAY);

33.-SUBTIME():Restar tiempos.Devuelve expresion1 - expresion2 expresado como un valor en el mismo formato que expresión1. Expresión1 es una expresión de hora o fecha y hora, y expre2 es una expresión de hora.
	Sintaxis:SELECT SUBTIME(expresion1[AAAA-MM-DD HH:MM:SS.ccc],expresión2[HH:MM:SS.ccc])
	EJEMPLO:
	select subtime('02:35:00','01:15:00');Devuelve 1:20 la resta

34.-SYSDATE():Devuelve la hora a la que se ejecuta la funcion.Devuelve la fecha y hora actuales, como un valor en formati 'AAAA-MM-DD hh:mm:ss' o AAAAMMDDhhmmss, dependiendo de si la función se utiliza en cadena o contexto numérico.

Devuelve la hora a la que se ejecuta. Esto difiere del comportamiento de NOW(), que devuelve un tiempo constante que indica el momento en que la declaración comenzó a ejecutarse.(Dentro de una función almacenafda o desencadenante, NOW() devuelve el momento en que la función o la declaración desencadenante comenzó a ejecutarse)

	Sintaxis1: SELECT SYSDATE();
	Sintaxis2: SELECT SYSDATE() + 0;
	EJEMPLO:
	select sysdate(),sleep(2),sydate();

35.-TIME():Extrae la porción de tiempo de la expresión pasada.Extrae la parte de tiempo de la expresión de hora o expresión de fecha y hora y la devuelve como una cadena. Si utiliza la sintaxis 2, se devuelve como un número.
	Sintaxis1: SELECT TIME(fecha_hora[AAAA-MM-DD HH:MM:SS.ccc]);
	Sintaxis2: SELECT TIME(fecha_hora) + 0;
	EJEMPLO:
	select time('2020-04-26 12:45:03');
	select time('2020-04-26 12:45:03') + 0;

36.-TIME_FORMAT():Formato como Hora.Se usa como la función DATE_FORMAT(),pero el "formato" puede contener especificaciones de formato solo para horas, minutos, segundos y microsegundos. Otros especificadores producen un valor NULO o 0.

	Sintaxis:SELECT TIME_FORMAT('expresion','formato');

	Formatos validos son los siguientes:
	%f Microsegundos (000000..999999)
	%H Horas (00..23)
	$h Horas (01..12)
	%I Horas (01..12)
	%i Minutos, numerico (00..59)
	%s Segundos
	%S Segundos
	EJEMPLO:
	select time_format('8:10:38','%h');
	select time_format('8:10:38','%h %i');
	select time_format('8:10:38','%h %i %s');

37.-TIME_TO_SEC():Devuelve el argumento de tiempo, convertido a segundos.
	Sintaxis:SELECT TIME_TO_SEC('tiempo[HH:MM:SS]');
	EJEMPLO:
	select time_to_sec('1:0:00');Muestra la cantidad se segundos que tiene una hora
	select time_to_sec('2:45:10');

38.-TIMEDIFF():Restar tiempo.Devuelve expresion1 - expresion2 expresado como un valor de tiempo. expresion1 y expresion2 son expresiones de hora o fecha y hora, pero ambas deben ser del mismo tipo.
	Sintaxis:SELECT TIMEDIFF(expresion1[AAAA-MM-DD HH:MM:SS.ccc],expresion2[AAAA-MM-DD HH:MM:SS.ccc])
	EJEMPLO:
	select timediff('2020-05-01 01:05:28','2020-04-30 23:50:10');Muestra la diferencia en hora en este caso es 1:15:18

39.-TIMESTAMP():Devuelve la expresión de fecha o fecha y hora.Con un único argumento, esta función devuelve la expresión date o datetime como un valor datetime. Con dos argumentos, agrega la expresión de tiempo expresion2 a la expresion fecha o fecha y hora y devuelve el resultado como un valor de fecha y hora.
	Sintaxis1: SELECT TIMESTAMP('fecha_hora[AAAA-MM-DD HH:MM:SS.ccc]');
	Sintaxis2: SELECT TIMESTAMP('fecha_hora','hora[HH:MM:SS.ccc]');
	EJEMPLO:
	select timestamp('2020-04-18');Convierte al formato fecha y hora
	select timestamp('2020-04-18 14:55:10','00:05:00');Muestra o añade los 5 min y mostrar 15:00:10

40.-TIMESTAMPADD():Agrear un intervalo a una expresión entero a la expresión date o datetime
	Sintaxis:SELECT TIMESTAMPADD(intervalo[second, minute,hour,Day,week,month,year],cantidad[# # #],fechahora[AAAA-MM-DD HH:MM:SS.ccc]);
	EJEMPLO:
	select timestampadd(second,60,'2020-04-25');El resultado sería 2020-04-25 00:01:00
	select timestampadd(minute,5,'2020-04-25 12:00:00');
	select timestampadd(week,3,'2020-04-25');

41.-TIMESTAMPDIFF():Resta un intervalo de una expresión de fecha y hora.Devuelve la expresion2 - expresion1, donde ambas expresiones son de tipo fecha o fecha y hora. El resultado se expresa en la unidad de medida espceificada en "Intervalo", como un entero.
Una expresion puede ser una fecha y la otra una fecha y hora;un valor de fecha, se trarat como una fecha y hora, que tiene la parte de tiempo '00:00:00' cuando sea necesario. La unidad para el resultado(un entero) viene dada por el argumento de la unidad.
	Sintaxis: SELECT TIMESTAMPDIFF(intervalo[second, minute,hour,Day,week,month,year],expr1[AAAA-MM-DD HH:MM:SS.ccc],expr2[AAAA-MM-DD HH:MM:SS.ccc]);
	EJEMPLO:
	select timestampdiff(minute,'2020-05-15 15:35:29','2020-05-01 16:48:30'); muestra la diferencia en el intervalo(minutos)
	select timestampdiff(month,'2020-05-01','2020-07-12');

42.-TO_DAYS():Devuelve el argumento de fecha convertido a días.Dada una fecha, devuelve un número de día(el numero de dias desde el año 0).Noestá destinado a usarse con valores que preceden al advenimeinto del calendario gregoriano(1582), por que no tiene en cuenta los dias que se perdieron cuando se cambio el calendario.
	Sintaxis: SELECT TO_DAYS('fecha[AAAA-MM-DD]');
	EJEMPLO:
	select to_days('2020-05-15');
	select to_days('2020-05-17');

43.-TO_SECONDS():Devuelve el argumento de fecha o fecha y hora convertido a segundos desde el año 0.Dada una fecha o fecha y hora expr, devuelve el numero de segundos desde el año 0. Si expr no es una fecha válida o valor de fceha y hora, devuelve NULL.
	Sintaxis:SELECT TO_SECONDS('fechahora[AAAA-MM-DD HH:MM:SS]');
	EJEMPLO:
	select to_seconds('2020-05-20 00:00:00');

44.-UNIX_TIMESTAMP():Devuelve una marca de tiempo Unix.Si se llama UNIX_TIMESTAMP() sin argumento de fecha, devuelve una marca de tiempo Unix que representa los segundos desde '1970-01-01 00:00:00' UTC.
	Sintaxis: SELECT UNIX_TIMESTAMP('fecha[AAAA-MM-DD HH:MM:SS ó AAAA-MM-DD]');
	EJEMPLO:
	select unix_timestamp();
	select unix_timestamp('2020-05-15');
	select unix_timestamp('2020-05-15 01:00:00');

45.-UTC_DATE():Devuelve la fecha UTC actual.Devuelve la fecha UTC(meridiano de grenwich) actual como un valor en formato 'AAAA-MM-DD' o AAAAMMDD, dependiendo de si la función se usa en contexto de cadena o numérico
	Sintaxis1: SELECT UTC_DATE();
	Sintaxis2: SELECT UTC_DATE() + 0;
	EJEMPLO:
	select utc_date();
	select utc_date() + 0;

46.-UTC_TIME():Devuelve la hora UTC actual.Devuelve el tiempo UTC actual como un valor en formato 'hh:mm:ss' o hhmmss, dependiendo de si la función se utiliza en una cadena o contexto numérico.
	Sintaxis1: SELECT UTC_TIME();
	Sintaxis2: SELECT UTC_TIME() + 0;
	EJEMPLO:
	select utc_time();
	select utc_time() + 0;

47.-UTC_TIMESTAMP():Devuelve la fecha y hora UTC actual.Devuelve la fecha y hora UTC actual como un valor en formato 'AAAA-MM-DD hh:mm:ss' o AAAAMMDDhhmmss, dependiendo de si la función se usa en cadena o contexto numerico.
	Sintaxis1: SELECT UTC_TIMESTAMP();
	Sintaxis2: SELECT UTC_TIMESTAMP() + 0;
	EJEMPLO:
	select utc_timestamp();
	select utc_timestamp() + 0;

48.-WEEK():Devuelve el número de semana.la forma de dos argumntos de WEEK() le permite especificar si la semana comienza el domingo o el lunes y su el valor de retorno debe de estar en el rango de 0 a 53 o de 1 a 53.Si se omite el argumento de modo,el valor de la variable de sistema default_week_format se utiliza.
	Sintaxis:SELECT WEEK('fecha[AAAA-MM-DD]',modo[0..7])
	MODOS:
	0 Domingo 	0-53 	con un domingo en este año
	1 Lunes 	0-53	con 4 o mas días en este año
	2 Domingo 	1-53	con un domingo en este año
	3 Lunes 	1-53	con 4 o mas días en este año
	4 Domingo 	0-53	con 4 o mas días en este año
	5 Lunes 	0-53	con un Lunes en este año
	6 domingo 	1-53	con 4 o mas días en este año
	7 Lunes 	1-53	con un Lunes en este año
	EJEMPLO:
	select week('2020-02-20');Muestra la seman 7
	select week('2020-02-20',0);
	select week('2020-02-20',1);

49.-WEEKDAY():Devuelve el indice del día de la semana para la fecha (0=lunes,1=martes,...6=Domingo)
	Sintaxis:SELECT WEEKDAY('fecha[AAAA-MM-DD]');
	EJEMPLO:
	select weekday('2020-05-15');
	select weekday('2020-05-18');

50.-WEEKOFYEAR():Devuelve la semana calendario de la fecha(1-53).
	Sintaxis:SELECT WEEOFYEAR('fecha[AAAA-MM-DD]')
	EJEMPLO:
	select weekofyear('2020-01-12');te muestra el numero de la semana
	select weekofyear('2020-02-12');
	select weekofyear('2020-03-12');

51.-YEAR():Regresa el año para la fecha, en el rango de 1000 a 9999, o 0 para la fecha "cero"
	Sintaxis: SELECT YEAR('fecha[AAAA-MM-DD HH:MM:SS]');
	EJEMPLO:
	select year('2020-01-12');

52.-YEARWEEK();Regresa el año y la semana.Devuelve año y seman para una fecha. El año en el resultado puede ser diferente del año en el argumento de fecha para la primera y la ultima semana del año.
	Sintaxis:SELECT YEARWEEK('fecha[AAAA-MM-DD HH:MM:SS]',modo[0..7]);
	MODO:
	MODOS:
	0 Domingo 	0-53 	con un domingo en este año
	1 Lunes 	0-53	con 4 o mas días en este año
	2 Domingo 	1-53	con un domingo en este año
	3 Lunes 	1-53	con 4 o mas días en este año
	4 Domingo 	0-53	con 4 o mas días en este año
	5 Lunes 	0-53	con un Lunes en este año
	6 domingo 	1-53	con 4 o mas días en este año
	7 Lunes 	1-53	con un Lunes en este año
	EJEMPLO:
	select yearweek('2020-01-12');
	select yearweek('2020-12-31', 0);
	select yearweek('2020-12-31', 1);

		######################## FUNCIONES PARA ENCRIPTACION Y COMPRESION ########################

1.-AES_ENCRYPT():Cifrar usando AES.El cifrado de datos utiliza el algoritmo oficial AES(Advanced Encryption Standard), anteriormente conociso como "Rijndael".El estandar AES permite varias longitudes de clave, Por defecto, esta funcion implementa AES con una longitud de clave de 128 bits.

	Sintaxis:SELECT AES_ENCRYPT(cadena,llave_cadena);

Cifra la "cadena"(parametro1) utilizando la cadena de clave "Llave_cadena" (parametro2) y devuelve una cadena binaria que contiene la salida cifrada.Si cualquiera de los argumentos de la función es NULL,la función devuelve NULL.
	EJEMPLO:
	select aes_encrypt();

2.-AES_DECRYPT():Descifrar usando AES.Descifra la "cadena"(parametro1) utilizando la cadena de clave "llave_cadena"(parametro2) y devuelve una cadena que contiene el texto original sin cifrar (descifrado). Si cualquiera de los argumentos de la función es NULL, la función devuelve NULL.
	Sintaxis:SELECT AES_DECRYPT(cadena,llave_cadena);

3.-COMPRESS():Devuelve el resultado como una cadena binaria
	Ejemplo:
	update cifrado set cadena_cifrada = compress(cadena_original)

4.-UNCOMPRESS():descomprimir una cadena antes de compresión
	Ejemplo:
	select uncompress(cadena_cifrada) from cifrado

5.-UNCOMPRESSED_LENGTH():Devuelve longitud de cadena antes de compresión.Devuelve la longitud que tenía la cadenacomprimida antes de ser comprimida.
	Sintaxis:
	SELECT UNCOMPRESSED_LENGHT(cadena_binaria);
	EJEMPLO:
	select uncompressed_lenght(cadena_cifrada) from cifrado;

6.-MD5():Calcular suma de comprobación MD5.Calcula una suma de comprobación MD5 de 128 bits para la cadena. El valor se devuelve como una cadena de 32 digitos hexadecimales, o NULL si el argumento era NULL. El valor de retorno puede, por ejemplo, usarse como una clave hash.

	Sintaxis: SELECT MD5(cadena);

Este es el "Algoritmo de resumen de mensajes MD5 de RSA Data Security, Inc.".
	EJEMPLO:
	select md5(cadena_original) from cifrado:

7.-SHA1(),SHA():Calcular una sema de comprobación de 160 bits SHA-1.Calcula una suma de verificación de 160 bits SHA-1 para la cadena, como se describe en RFC3174(algoritmo de hash seguro). El valor se devuelve como una cadena de 40 siitos hexadeciamales o NULL si el argumento era NULL.
	Sintaxis:SELECT SHA1(cadena);
SHA1() puede considerarse un equivalente criptográfico más seguro de MD5().
	EJEMPLO:
	select sha1(cadena_original) from cifrado;

8.-SHA2():Calcular una suma de comprobación SHA-2.Calcula la familia SHA-2 de funciones (SHA-224, SHA-256, SHA-384 y SHA-512). El primer argumento es la cadena de texto sin formato que se va a dividir. El segundo argumento indica la lingitud de bit deseada del resultado, que debe tener un valor de 224, 256, 384, 512 o 0 (que es equivalente a 256). Si cualquiera de los argumentos es NULL o la longitud del hash no es uno de los valores permitidos, el valor de retorno es NULL. De lo contrario, el resultado de la sunción es un valor hash que contiene el número deseado de bits.

	Sintaxis:SELECT SHA2(cadena,longitud)

	EJEMPLO:
	select sha2(cadena_original,224);
	select sha2(cadena_original,256);
	select sha2(cadena_original,384);
	select sha2(cadena_original,512);

			######################## FUNCIONES DE INFORMACIÓN ########################

1.-BENCHMARK():Ejecuta repetidamente una expresión.Esta función ejecuta la expresión "expr", la contidad de veces indicada en "contar".Puede usarse paa medr la rapidez con que MySQL procesa la expresión. El valor del resultado es 0 o NULL para argumentos inapropiados, como un recuento de repeticiones NULL o negativo.
	Sitaxis:SELECT BEnCHMARK(contar,expr)
	EJEMPLO:
	select benchmark(1000000,AES_ENCRYP('Hola','Hasta la vista'));

2.-CHARSET():Devuelve el conjunto de caracteres del argumento de cadena.
	Sitaxis:SELECT CHARSET(cadena);
	EJEMPLO:
	select charset('ejemplo de la funcion charset');Arroja Latin1
	select @cadena = CONVERT('ejemplo de la funcion charset' USING ucs2);
	select charset(@charset);

3.-COERCIBILITY():Devuelve el valor de coercibilidad de cotejo del argumento de cadena.Los valores de retorno tienen los sognificados que se muestran en la siguiente tabla. los valores más bajos tienen mayor prioridad.
0-->Cotejo Explicita. Valor con cluausula COLLATE
1-->Son cotejo. COncatenacion de cadenas con diferente cotejo
2-->Cotejo implicito. Valor de columna, variable local.
3-->Constante del sistema. Retorno de la función USER().
4-->Coercible. Cadena Literal.
5-->Numérico. Valor númerico o temporal.
5-->Ignorable. NULL o una expresión derivada de NULL.
	Sitaxis:SELECT COERCIBILITY(cadena);
	EJEMPLO:
	select coercibility('abc' collate LATIN1_BIN);

4.-COLLATION():Devuelve el cotejo del argumento de cadena.
	Sitaxis:SELECT COLLATION(cadena);
	EJEMPLO:
	select collation('abc');

5.-CONNECTION_ID():Devuelve el ID de conexión para la conexión.Devuelve laID de conexion (ID de hilo) para la conexión. Cada conexión tiene un ID que es unica entre el conjunto de clientes actualmente conectados.
	Sitaxis:SELECT CONNECTION_ID();
	EJEMPLO:
	select connection_id();

6.-CURRENT_USER():El nombre de usuario autenticado y el nombre de host.
	Sitaxis:SELECT CURRENT_USER();
	EJEMPLO:
	select current_user();

7.-DATABASE():Devulve el nombre actual de la Base de Datos seleccionada.
	Sitaxis:SELECT DATABASE();
	EJEMPLO:
	select database();

8.-FOUND_ROWS():para un select con una clausula LIMIT, el número de filas que se devolverían si no hubiera una cláusula LIMIT.En una sentencia SELECT con parametro LIMIT, retorna la cantidad de fila que hubiese seleccionado si NO tuviera LIMIT.
	Sitaxis:SELECT SQL_CALC_FOUND_ROWS * FROM tabla WHERE condición LIMIT #;
			SELECT FOUND_ROWS();
	EJEMPLO:
	select * from productos;
	SELECT SQL_CALC_FOUND_ROWS * FROM tabla WHERE condición LIMIT #;
	SELECT FOUND_ROWS();

9.-LAST_INSERT_ID():Valor de la columna AUTOINCREMENT para el ultimo INSERT.Retorna el numero de ID máximo de la ultima inserción realizada en una tabla sobre un campo con autoincremento.
	Sitaxis:SELECT LAST_INSERT_ID();
	EJEMPLO:
	select last_insert_id();

10.-ROW_COUNT():El numero de filas actualizadas.Retorna el numero de filas actualizadas en la ultima operación de insert, update o delete.
	Sitaxis:SELECT ROW_COUNT();
	EJEMPLO:
	select row_count();

11.-SCHEMA():Sinonimo de BASE DE DATOS().Devuelve el nombre de la BD actualmente seleccionada. Esta funcion es sinónimo de la función DATABASE().
	Sitaxis:SELECT schema();
	EJEMPLO:
	select schema();

12.-SESSION_USER():Sinonimo de USER().
	Sitaxis: SELECT SESSION_USER();
	EJEMPLO:
	select session_user();

13.-SYSTEM_USER():Sinonimo de USER().
	Sitaxis:SELECT SYSTEM_USER();
	EJEMPLO:
	select systema_user();

14.-USER():El nombre de usuario y el nombre de host proporcionado por el cliente.Devuelve el nombre de usuario MySQL actual y el nombre de host como una cadena en el juego de caracteres utf8.
El valor indica el nimbre de usuario que especifico al conectarse al servidor y el host del cliente desde el que se conectó.El valor puede ser diferente del de CURRENT_USER().
	Sitaxis:SELECT USER();
	EJEMPLO:
	select user();

15.-VERSION():Devuelve una cadena que indica la version del servidor MySQL.Devuelve una cadena que indica la version del servidor MySQL. La cadena usa el juego de caracteres utf8.El valor puede tener un sufijo además del número de versión.
	Sitaxis:SELECT VERSION();
	EJEMPLO:
	select version();

####################### DECLARACIONES DE DEFINICION DE DATOS ##########################

1.-ALTER:
	-ALTER DATABASE
		ALTER { DATABSE | SCHEMA }[nombre_bd] especificacion
		especificacion:
		[DEFAULT] CHARACTER SET[=] nombre_charset | [DEFAULT] COLLATE[=]nombre_colacion | DEFAULT ENCRYPTION[=]{ 'Y' | 'N'}
		Ejemplo:
		show create database clientes;
		ALTER TABLE clientes CHARACTER SET utf8 COLLATE utf8_unicode_ci;
		SHOW CREATE DATABASE clientes;

	-ALTER EVENT
		ALTER
			[DEFINER = usuario]
			EVENT nombre_evento
			[ON SCHEDULE calendario]
			[ON COMPLETION[NOT] RESERVE]
			[RENAME TO nuevo_nombre_evento]
			[ENABLE | DISABLE | DISABLE ON SLAVE]
			[COMMENT 'cadena']
			[DO cuerpo_evento]
		Ejemplo:
			CREATE EVENT actualizar_costos
				ON SCHEDULE
				EVERY 1 minute
				COMMENT 'Actualizacion automatica de Costos'
				DO
				UPDATE clientes.productos SET costo = costo+5;
				SHOW WARNINGS;
				SET GLOBAL event_schedule=ON;


	-ALTER FUNCTION
		ALTER FUNCTION func_name[caracteristicas]
			caracteristicas:
			COMMENT 'cadena'
			| LANGUAGE SQL
			| {CONTAINS SQL | NO SQL | READS SQL DATA | MODIEFIES SQL DATA }
			|SQL SECURITY {DEFINER | ONVOKER}
		Ejemplo:
		DELIMITER//
		CREATE FUNCTION altura_precio(vprecio_venta int)
		 RETURN VARCHAR(20) COMMENT 'Funcion de prueba'
		BEGIN
		  RETURN 'Demostracion';
		 END //

		 DELIMITER;
		 SHOW FUNCTION STATUS;
		 ALTER FUNCTION altura_precio COMMENT 'Calculo  de altura de precio';
		 SHOW FUNCTION STATUS;
		 DROP FUNCTION altura_precio;

	-ALTER INSTANCE
		ALTER INSTANCE acciones

		acciones:{
			ROTATE INNODB MASTER KEY
			| ROTATE BINLOG MASTER KEY
			| RELOAD TLS [NO ROLL BACK ON ERROR]
		}
		ALTER INSTANCE ROTATR BINLOG MASTER KEY->GIRA LA CLAVE MAESTRA DE REGISTRO BINARIO
		ALTER INSTANCE RELOAD TLS->RECONFIGURA EL TEXTO SSL A PARTIR DE LOS VALORES ACTUALES DE LAS VARIABLES DEL SISTEMA

	-ALTER LOGFILE GROUP
		ALTER LOGFILE GROUP archivolog_grupo
		ADD UNDOLIFE 'nombre_archivo'
		[INITIAL_SIZE[=]tamaño]
		[WAIT]
		ENGINE[=]nombre_maquina

			ALTER LOGFILE GROUP grupo_1
			ADD UNDOFILE'undo_10.dat'
			INITIAL_SIZE=32M
			ENGINE=InnoDB;

			show warnings;


	-ALTER PROCEDURE
		ALTER PROCEDURE porc_name[caracteristicas...]

		caratcteristicas:
			COMMENT'cadena'
			| LANGUAGE SQL
			| {CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}
			| SQL SECURITY {DEFINER | INVOKER}

		DELIMITER //

		CREATE PRCEDURE contar_productos(IN vnumerodoc INT,OUT vcuantos INT)
		COMMENT 'procedimiento de prueba'
		BEGIN
			SELECT COUNT(*)INTO vcuantos FROM det_factura
			WHERE num_factura = vnumerodoc;
		END//

		DELIMITER;

		SHOW PROCEDURE STATUS like 'CONTAR%';

		ALTER PROCEDURE contar_productos COMMENT 'Cuenta la cantidad de productos en un documento';
		SHOW PROCEDURES STATUS like 'CONTAR%';


	-ALTER SERVER ?


	-ALTER: Permite actulizar la esructura de una tabla.Agregar o eliminar columnas, crear o destruir indices,cambiar el tipo de columna
		ALTER TABLE nombre_tabla [especificaciones_alter[,especificaciones_alter]...][opcones_particion]
		*ver video cap 49 minuto 7:12


	-ALTER TABLESPACE ? Ver Video


	-ALTER VIEW: Cambia la definicion de una vista que debe de existir.
		ALTER
		[ALGORITHM={UNDEFINE|MERGE|TEMPTABLE}]
		[DEFINER=usuario]
		[SQL SECURITY{DEFINER|INVOKER}]
		VIEW nombre_vista[(lista_columnas)]
		AS instruccion_select
		[WITH[CASCADED|LOCAL]CHECK OPTION]

		EJEMPLO:
			CREATE VIEW vista_ventas(id,nombre,documento,fecha) AS
			SELECT a.num_cliente,a.nombre,b.num_factura,b.fecha_factura FROM cliente a, factura b WHERE a.num_cliente = b.num_cliente;

			SELECT * FROM vista_ventas;


2.-CREATE:
<<<<<<< HEAD
	-CREATE DATABASE:Crea una base de datos que especifiques.
		Sintaxis:
			CREATE {DATABASE|SCHEMA} [IF NOT EXISTS] nombre_bd
			[especificacion_creación]...
			especificacion_creación
			[DEFAULT] CHRACTER SET[=] nombre_charset
			| [DEFAULT] COLLATE[=]nombre_colcacion
			| DEFAULT ENCRYPTION[=]{'Y' | 'N'}
		EJEMPLO:
		CREATE DATABASE IF NO EXISTS mi_database CHARACTER SET = latin1;
		SHOW DATABASES;

	-CREATE EVENT:Permite crear y programar un nuevo evento, el evento no se ejecutara ya que debe de estar habilitado el programador de eventos.
		Sintaxis:
			CREATE
				[DEFINER =usuario]
				EVENT
				[IF NOT EXISTS]
				nombre_event
				ON SCHEDULE calendario
				[ON COMPLETION[NOT]PRESERVE]
				[ENABLE|DISABLE|DISABLE ON SLAVE]
				[COMMENT 'cadena']
				DO cuerpo_del_evento;
		EJEMPLO:
	-CREATE FUNCTION
=======
	-CREATE DATABASE
	-CREATE EVENT:Nos permite programar un nuevo evento, el evento no se ejecutara a menos que el programador de eventos este habilitado.
	Sintaxis:
		CREATE
		[DIFINER= usuario]"opcional"
		EVENT
		[IF NOT EXISTS]
		nombre_event
		ON SCHEDULE calendario* "para especificar un calendario"
		[ON COMPLETION[NOT]PRESERVE]
		[ENABLE|DISABLE|DISABLE ON SLAVE]
		[COMMENT'cadena']
		DO cuerpo_del_evento

		*Para el calendario
		AT timestamp[+INTERVAL intervalo]...
		| EVERY intervalo
		[STARTS timestamp[+INTERVAL intervalo]...]
		[ENDS timestamp[+INTERVAL intervalo]...]
			intervalo:
			quanty{YEAR|QUARTER|MONTH|DAY|HOUR|MINUTE|WEEK|SECOND|YEAR_MONTH|DAY_HOUR|DAY_MINUTE|DAY_SECOND|HOUR_MINUTE|HOUR_SECOND|MINUTE_SECOND}

		EJEMPLO:
		CREATE EVENT actualizar_costos
		ON SCHEDULE
			EVERY 10 SECOND
		COMMENT 'Actualizacion automatica de costos'
		DO
		UPDATE cliente.productos SET costo=costo+5;

		SHOW WARNINGS;
		SET GLOBAL event_shceduler=ON;

	-CREATE FUNCTION*
>>>>>>> 5cdf4a81f19712b6be1d312ddda516e8c1b732e8
	-CREATE INDEX
	-CREATE LOGFILE GROUP
	-CREATE PROCEDURE y CREATE FUNCTION
	-CREATE SERVER
	-CREATE SPATIAL REFERENCE SYSTEM
	-CREATE TABLE
	-CREATE TALESPACE:Se usa para crear un espacio de tabla, espacio de tabla compartido.
	SINTAXIS:
		CREATE[UNDO]TABLESPACE nombre_tablespace

		InnoDB y NDB:
		[ADD DATAFILE'nombre_archivo']

		InnoDB only:
		[FILE_BLOCK_SIZE=valor]
		[ENCRYPION[=]{'Y'|'N'}

	-CREATE TRIGGER:Crea disparadores(un objeto de BD con nombre que está asociado a una tabla) y se activa cuando hay un evento en particular para esta tabla.El disparador se asocia con la tabla que se indica en el parametro.
	-CREATE VIEW
3.-DROP:
	-DROP DATABSE
	-DROP EVENT
	-DROP FUNCTION
	-DROP INDEX
	-DROP LOGFILE GROUP
	-DROP PROCEDURE y DROP FUNCTION
	-DROP SERVER
	-DROP SPATIAL REFERENCE SYSTEM
	-DROP TABLE
	-DROP TABLESPACE
	-DROP TRIGGER
	-DROP VIEW

4.-RENAME:
	-RENAME TABLE:

5.-TRUCATE:
	-TRUNCATE TABLE:


############################### DECLARACIONES DE MANIPULACION DE DATOS #####################################
1.-CALL:Invoca un procedimiento almacenado que se definio previamente con CREATE PROCEDURE.
2.-DELETE
3.-DO
4.-HANDLER:Proporciona un accesos directo alas interfaces del motor de almacenamiento de tablas
5.-IMPORT TABLE
6.-INSERT
7.-LOAD DATA:Permite leer las filas de un arhcivo de texto en una tabla a una velocidad muy rápida
9.-LOAD XML:Lee los datos de un archivo XML y lox coloca en una tabla
10.-REPLACE
11.-SELECT
12.-TABLE
13.-UPDATE
14.-VALUES

############################### SINTAXIS DE DECLARACION COMPUESTA #####################################

1.-INSTRUCCION BEGIN ... END Compuesta, Se usa para escribir declaraciones compuestas que pueden aparacer dentro de programas almacenados, Una declaracion compuesta puede tener varias declaraciones.
	SINTAXIS:
	[etiqueta_begin:]BEGIN
		[lista_de_instrucciones]
	END[etiqueta_fin]


2.-Etiqueta de delaracion
3.-Instruccion DECLARE
4.-INSTRUCCIONES DE CONTROL DE FLUJO:
	CASE:
		SINTAXIS:
			CASE valor_case
				WHEN cuando_valor THEN lista_de_instrucciones
				[WHEN cuando_valor THEN lista_de_instrucciones]...
				[ELSE lista_de_instrucciones]
			END CASE

			CASE
				WHEN condicion_busqueda THEN lista_de_instrucciones
				[WHEN condicion_busqueda THEN lista_de_instrucciones]...
				[ELSE lista_de_instrucciones]
			EN CASE

	IF:
		SINTAXIS:
		IF condicion_busqueda THEN lista_de_instrucciones
			[ELSEIF condicion_busqueda THEN lista_de_instrucciones]...
			[ELSE lista_de_instrucciones]
		END IF
	ITERATE:
	LEAVE:
	LOOP:
	REPEAT:
	RETURN:
	WHILE:
5.-CURSORES
6.-MANEJO DE CONDICIONES
7.-RESTRICCIONES EN EL MANEJO DE CONDICIONES
>>>>>>> 5cdf4a81f19712b6be1d312ddda516e8c1b732e8



<<<<<<< HEAD
*********************** CLAUSULA GROUP BY ***********************

EJEMPLOS:
1.-SELECT Ventas_Fecha,sum(Ventas_Total) AS 'Total' FROM Ventas GROUP BY Ventas_Fecha (Aqui se suman las fechas de cada dia)
2.-SELECT year(Ventas_Fecha) AS Año,Month(Ventas_Fecha) AS Mes,Day(Ventas_Fecha) AS Dia,sum(Centas_total) AS Total FROM Ventas GROUP BY Año,Mes,Dia


*********************** CLAUSULA IN / NOT IN  ***********************
*SUBCONSULTAS->Solo aceptan una columna ya que traemos una lista de valores

EJEMPLOS:
1.-SELECT Prod_Id, Prod_Descripcion FROM Productos WHERE Prod_Status IN (1,0)
2.-SELECT Prod_Id, Prod_Descricpion FROM Productos WHERE Prod_Id NOT IN (SELECT DISTINCT(VD_Prod_Id) FROM Ventas_Detalle)

*********************** CLAUSULA LIKE  ***********************

EJEMPLO:
SELECT Prod_Id,Prod_Descripcion, Prod:color FROM Productos WHERE CONCAT(Prod_Descripcion, Prod_Color) LIKE '%AD%'

*********************** CLAUSULA JOIN(INNER JOIN)  ***********************
Es importante llevar un orde de los JOIN ya ue se ejecutan en cascada.No se pueden intercalar datos

EJEMPLO:
SELECT Ventas_Fecha,Ventas_NroFactura,Ventas_CliID,Cli_RazonSocial,VD_ProdId,Prod_Descripcion,Prod_ProdId,Prov_Nombre,VD_Cantidad,CD_Precio,(VD_Cantidad * VD_Precios) AS 'Parcial' FROM Ventas
	JOIN Ventas_Detalle ON VD_VentasID=Ventas_Id
	JOIN Productos ON VD_ProdId=Prod_Id
	JOIN Proveedores ON Prod_ProvId=Prov_Id
	JOIN Clientes ON VD_ProdId=Prod_Id

*********************** CLAUSULA LEFT JOIN  ***********************

EJEMPLO:
SELECT * FROM Alumnos LEFT JOIN Cursos ON Curso_AlumnoID=Alumno=Id

*********************** CLAUSULA RIGHT JOIN  ***********************

EJEMPLO:
SELECT * FROM Alumnos RIGHT JOIN Cursos ON Curso_AlumnoID=Alumno=Id

*********************** CLAUSULA FULL JOIN  ***********************
Para utilizarlo deben de ser los mismo campos

SELECT * FROM alumnos LEFT JOIN cursos ON Curso_AlumnoID = Alumno_Id
UNION
SELECT * FROM alumnos RIGHT JOIN ON Curso_alumnoID=Alumno_Id

*********************** IF  o CASE ***********************
EJEMPLOS:
SELECT Prod_Id,Prod_Descripcion, IF(Prod_Status=1,'Habilitado','Deshabilitado') AS 'Estado' FROM Productos

SELECT Prod_Id,Prod_Descripcion, CASE WHEN(cuando) Prod_Status=1 THEN(entonces) 'Habilitado' ELSE 'Deshabilitado' END AS 'Estado' FROM Peoductos

1.-SELECT Prod_Id,Prod_Descripcion, CASE WHEN(cuando) Prod_Status=1 THEN(entonces) 'Habilitado'
								 	  WHEN(cuando) Prod_Status=0 THEN(entonces) 'Deshabilitado'
								 	  WHEN(cuando) Prod_Status=2 THEN(entonces) 'Otro Estado'
 									END AS 'Estado' FROM Productos

Ó 2.-SELECT Prod_Id,Prod_Descripcion, CASE Prod_Status
									  WHEN(cuando) 1 THEN(entonces) 'Habilitado'
								 	  WHEN(cuando) 0 THEN(entonces) 'Deshabilitado'
								 	  WHEN(cuando) 2 THEN(entonces) 'Otro Estado'
 									END AS 'Estado' FROM Productos

*********************** SUBSTRING ***********************
SELECT Prod_Id,Prod_Descripcion,SUBSTR(Prod_Descripcion,1,10) AS 'Parte' FROM Productos

1.-SELECT Prod_Id,Prod_Descripcion, CASE SUBSTR(Prod_Descripcion,1,1)
										 WHEN 'A' THEN 'Letra A'
										 WHEN 'B' THEN 'Letra B'
										 END AS 'Ejercicio'
									FROM Productos

*********************** HAVING ***********************
EJEMPLO:

SELECT Prod_Id,Prod_Descrpcion,Prod_Color,SUM(VD_Cantidad) AS 'Unidades' FROM productos
					JOIN ventas_detalle ON Prod_Id=VD_ProdID
					JOIN ventas ON VD_VentasID = Ventas_ID
WHERE Prod_ProdId=1 AND Ventas_Fecha BETWEEN '2018-01-01' AND '2018-02-14'
GROUP BY Prod_Id
HAVING Unidades > 20
ORDER BY Unidades DESC

*********************** INSERT ***********************

EJEMPLOS:
INSERT INTO Alumnos (Alumno_Nombre)[campos en donde se insertan Valores] VALUES ('Pedro Navaja')[Valores]

*********************** UPDATE ***********************
EJEMPLOS:
UPDATE Productos SET Prod_Status = 1 WHERE Prod_Precio > 0

Mas de un Campo:
UPDATE Productos SET Prod_Status = 1,Prd_CentaSuspendida =1 WHERE Prod_Precio > 0

*********************** SUBCONSULTAS ***********************
EJEMPLOS:
SELECT Prod_Id AS 'Articulo',
	   Prod_descripcion AS 'Descripcion'
	   (SELECT MAX(Ventas_Fecha) AS Ultfecha FROM Ventas JOIN Ventas_Detalle ON Ventas_ID=VD_VentasID WHERE Prod_Id=1633) AS UltFecha,
	   (SELECT COUNT(DISTINCT(Ventas_CliID)) AS Cddd FROM Ventas JOIN Ventas_Detalle ON Ventas_ID=VD_VentasID WHERE Prod_Id=1633) AS CantCli
  FROM Productos
  WHERE Prod_Id=1633

*********************** ENCRIPTAR DATOS ***********************
SELECT Prod_Descripcion, AES_ENCRYPT(Prod_Descripcion, 'Master del Desarrollo') AS DescripEnrypt FROM Productos

SELECT Prod_Descripcion, AES_DECRYPT(AES_ENCRYPT(Prod_Descripcion, 'Master del Desarrollo'),'Master del Desarrollo') AS Desencriptado FROM Productos

*********************** LENGTH ***********************
SELECT Prod_Descripcion, LENGTH(Prod_Descripcion) AS Largo FROM Productos

*********************** COMPRESS ***********************
SELECT COMPRESS(Prod_Descripcion) AS Comprimido FROM Productos

SELECT UNCOMPRESS(COMPRESS(Prod_Descripcion)) AS Resultado FROM Productos


*********************** EXPLAIN (PARA SABER LA OPTIMIZACION DE LAS CONSULTAS)***********************

EXPLAIN SELECT Prod_Id AS ID,Prod_Descripcion AS Descripcion,Ventas_Fecha AS Fecha,SUM(VD_Cantidad*VD_Precio) AS Vendidos
FROM productos
	JOIN ventas_detalle ON VD_ProdID = Prod_Id
	JOIN ventas ON VD_VentasID = Ventas_ID
WHERE Ventas_Fecha BETWEEN '2018-01-02' AND '2018-01-07'
GROUP BY ID,Descripcion,Fecha
ORDER BY Prod_Id

*********************** PROCESSLIST ***********************

La forma de ejecutarlo:
SHOW processlist

	####### PARA MATAR UN PROCESO  #####

	KILL (id proceso)8
	
******************************************************************


###### 04102021 ######->>>OBTENER EL NOMBRE DE LAS COLUMNAS DE UNA TABLA <- <- <- <-

1.- desc Articulo(nombre de la tabla)
2.- show columns from Articulo(Nombre de la tabla)

Para saber solo el nombre de la columna:
select COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'Articulo'(nombre de la tabla);

SELECT *
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = 'transtec_transtec'
  AND TABLE_NAME = 'factura'


###### 08112022 ######->>>OBTENER EL NOMBRE DE LAS COLUMNAS DE UNA TABLA CON UN CAMPO EN ESPECIFICO <- <- <- <-
SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.Columns WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'nombre_tabla' AND COLUMN_NAME LIKE '% %'
SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'nombre_tabla' AND COLUMN_NAME LIKE '% %'





******************************************************************
###### 27102021 ######->>>CONSULTA CON VARIOS LIKE
SELECT * FROM empresa WHERE (razonsocial(campo de busqueda) LIKE '%green%' OR razonsocial(campo de busqeda) LIKE '%rosalva%')




******************************************************************
###############   OBTENER DIAS DE UN MES EN ESPECIFICO   ###############
SELECT DAYOFMONTH(LAST_DAY('2021-03-01')) FROM factura
SELECT RIGHT( LAST_DAY(  '2003-02-03' ) , 2 ) FROM factura
SELECT DISTINCT  DAY(LAST_DAY('2010-08-01')) FROM viaje;





******************************************************************
###############   EJEMPLO PARA PODER AGREGAR UN FOLIO CONSECUTIVO A UNA CONSULTA   ###############
SET @rownum := 0; Re-iniciar la variable
SELECT  DISTINCT (@rownum:=@rownum+1) AS 'fila',/*id_usuario,*/nombre,lcase(Email) AS 'email',empresa FROM (SELECT @rownum:=0) r,usuario WHERE empresa IN (SELECT id_empresa FROM empresa WHERE STATUS = 1 ) AND STATUS = 1 AND email !='' AND empresa NOT IN (37) GROUP BY Email ORDER BY fila,empresa ASC





******************************************************************
###############   EJEMPLO GROUP CONCAT CON DISTINCT    ###############
group_concat(DISTINCT factura.id_factura) AS 'Alias de Columna' se lleva acabo con la condicion GORUP BY 



******************************************************************
###############   EJEMPLO CONTEO CON DISTINCT    ###############
IF(count(DISTINCT factura.id_factura)>1,sum(factura.subtotal),factura.subtotal) AS 'ASIGNA NOMBRE DE COLUMNA' -> se lleva acabo con la condicion GORUP BY 


******************************************************************
###############   PERMITE MOSTRAR TODOS LOS CAMPOS SIN LIMITACIONES CON EL GROUP CONTACT    ###############
SET SESSION group_concat_max_len = 1000000;




###############   PESO DE UNA TABLA ESPECIFICA    ###############
SELECT
  TABLE_NAME AS `Tabla`,
  ROUND((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024) AS `Tamaño (MB)`
FROM
  information_schema.TABLES
WHERE
    TABLE_SCHEMA = "transtec_transtec"
  AND
    TABLE_NAME = "carga"
ORDER BY
  (DATA_LENGTH + INDEX_LENGTH)
DESC;




******************************************************************
###############   COPIAR CON UN SELECT    ###############

INSERT INTO 'tabla_de_insercion tipo_ingreso' (nombre_tipo,naturaleza,id_empresa,fijo_variable,STATUS,tipo_Gasto 'campos que se copiaran') SELECT nombre_tipo,naturaleza,'207',fijo_variable,STATUS,tipo_Gasto FROM 'tabla_donde_seleccionara tipo_ingreso' WHERE id_empresa = 140 AND STATUS =1;


******************************************************************

###############   SABER EL PUESRTO DE MI BD    ###############
SHOW VARIABLES WHERE Variable_name = 'port';
