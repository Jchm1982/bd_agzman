CURSO BD CON ALEJANDRO GUZMAN


***************** Comandos para Crear DB *****************
CREATE database 'nombre de la base de datos';

	======= Para crear DB si no existe =======
CREATE database if not exists 'nombre BD'

***************** Usar nuestra DB *****************
USE 'nombre de la BD';

***************** VER TABLAS QUE CONTIENE DB *****************
SHOW TABLES;

***************** ELIMINAR DB *****************
DROP DATABASE 'nombre de BD a borrar';

***************** CREAR TABLAS EN LA BD *****************
USE 'nombre de la BD';

	CREATE TABLE 'nombre de la tabla'(
		 campo1 tipo(longitud),
		 campo2 tipo(longitud),
		 campo_n tipo(longitud)
	);

***************** ELIMINAR TABLAS EN LA BD *****************
DROP TABLE 'nombre de la tabla';

***************** TIPOS DE DATOS DE LAS COLUMNAS *****************
====TIPOS DE DATOS NUMERICOS
		1.-NUMERO ENTEROS
		2.-NUEMEROS FLOTANTE
	BIT-> [(Longitud)]entre 1 y 64, 1byte

	INT-> [(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(4 bytes). RANGO entre -2,147,483,648 y 2,147,483,647 con signo. LOnGITUD entre 0 y 4,294,967,295 sin signo

	NUMERIC->[(Longitud,decimales)][UNSIGNED][ZEROFILL]. Otro sinonimo de decimal

	TINYINT-> [(Longitud)][UNSIGNED][ZEROFILL], ENTERO(1 byte) longitud de-128 y 127 con signo.LONGITID de 0 a 255 sin signo
	INTEGER->[(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(4 bytes). RANGO entre -2,147,483,648 y 2,147,483,647 con signo. LOnGITUD entre 0 y 4,294,967,295 sin signo

	FIXED->[(Longitud,decimales)][UNSIGNED][ZEROFILL].Sinonimo de decimal.Numero con coma flotante. Longitud de -3.402823466 X 10 a la 38 hasta -1.175494351 X 10 a la -38 ó De 1.175494351 X 10 a la-38 hasta 3.402823466 X 10 a la 38

	BOOL,BOOLEAN->EQUIVALENTE ATINYINT(1), RANGO ENTRE0 Y 1.SE USA PARA FALSO(0) Y VERDADERO(1). 1 byte

	BIGINT->[(Longitud)][UNSIGNED][ZEROFILL]. Tipo Entero(8 bytes). RANGO entre -9,223,372,036,854,775,807 y 9,223,372,036,854,775,806 con signo. LONGITUD entre 0 y 18,446,744,073,709,551,615 sin signo

	FLOAT

	SMALLINT-> [(Longitud)][UNSIGNED][ZEROFILL] TIPO ENTERO(2 byte). RANGO ENTRE -32,768 y 32,767 con signo, longitud entre0 y65,535 sin signo

	DECIMAL->[(Longitud,decimales)][UNSIGNED][ZEROFILL]. Numero con coma flotante.Longitud de hasta 65 digitos en la parte entera yhasta 30 digitos en la parte decimal(por defecto 0)

	DOUBLE-> [(Longitud,decimales)][UNSIGNED][ZEROFILL]. Numero con coma flotante(doble precisión). Longitud de -1.7976931348623157 X 10 a la 308 hasta -2.2250738585072014 X 10 a la -308 ó De 2.2250738585072014 X 10 a la -308 hasta 1.7976931348623157 X 10a la 308

	MEDIUMINT-> [(Longitud)][UNSIGNED][ZEROFILL], TIPO ENTERO(3 bytes), RANGO entre -8388608 y 8388607 con signo. Longitud entre 0 y2,294,967,295 sin signo

	DEC-> SINONIMO DE DECIMAL

	DOUBLE PRECISION-> SINONIMO DE DOUBLE

====TIPOS DE DATOS FECHA Y HORA
	DATE->Fecha con formato "YYYY-MM-DD". 3 bytes

	DATETIME->[(precisión)] Fecha y Horacon formato "YYYY-MM-DD HH:MM:SS.SSSSSS". El parametro precisión en la parte decimal de los segundos.5 bytes

	TIMESTAMP->[(precisión)].El parametro precisión representala cantidad de dígitos que se usarán para representar una fecha y hora desde 1970 hasta 2037. 4 bytes

	TIME->[(precisión)]. Hora, con formato "HH:MM:SS[precisión valores de SS]". 3 bytes.

	YEAR->Representa el año con formato de cuatro digitos "YYYY" o dos digitos "YY". 1 byte

====TIPOS DE DATOS CADENA DE CARACTERES
	CHAR->[(longitud)]
		-Admite caracteres alfanumericos.
		-Longitud de 1 - 255 caracteres (por defecto 1)
		-Si se asigna una cadena de longitud menor,está se completará con espacios.
	VARCHAR->[(longitud)]
		-Similar a CHAR salvo que es necesario especificar la longitud y no seautorrellena con espacios.

	TINYTEXT->
		-Cadenas de longitud variable
		-Hasta 255 carácteres

	TEXT->
		-Cadenas de longitud variable
		-Hasta 65,535 carácteres (64k)

	MEDIUMTEXT->
		-Cadenas de longitud variable
		-Hasta 16,777,215 carácteres (16Mb)

	LONGTEXT->
		-Cadenas de longitud variable
		-Hasta 4,294,967,295 carácteres (4Gb)

====TIPOS DE DATOS BINARIOS
	BLOB->
		-Objeto Binario que puede almacenar culquiertipo de información. Admite hasta 65,535 caracteres.64Kb

	TINYBLOB->
		-Es similar al BLOB
		-Hasta 255 bytes.

	MEDIUMBLOB->
		-Es similar al BLOB
		-Hasta 16Mb.

	LONGBLOB->
		-Es similar al BLOB
		-Hasta 4Gb

***************** MOSTRAR BD CON VARIANTES CREACION DE BD*****************
show databases like 'cli%';

CREATE database IF NOT EXISTS clientes CHARACTER SET=latin2;(No puede crear la BD por que ya existe)
SHOW WARNINGS;(Muestra Level, Code, Y el mensaje)
SHOW CREATE DATABASE clientes;(Para mostrar cual fue la sintaxis que se uso para la creación de la BD)

***************** MOSTRAR TABLA CON VARIANTES, CREACION DE TABLAS*****************

CREATE[TEMPORARY(permite crear una tabla temporal)]TABLE[IF NOT EXISTS]nombre_tabla
(
	**EN ESTA SECCION ES DONDE SE DEFINEN TODAS LAS COLUMNAS E INDICES QUE COMPONEN LAS TABLAS**

	nombre_columna definicion_Columna(tipo_dato,[NOT NULL | NULL],[DEFAULT{literal | (expr)}], [AUTO_INCREMENT], [UNIQUE[KEY]], [[PRIMARY]KEY], [COMMENT'string'])
	| {INDEX|KEY}[nombre_indice]
	[tipo_indice](columna_llave,...)[opciones_indice]...
)
[DEFAULT] CHARACTER SET[=]charset_name
COMMENT[=]'string'

EJEMPLO:

CREATE TABLE if not EXISTS cliente(

	num_cliente INTEGER NOT NULL AUTO_INCREMENT COMMENT 'Numero de Identificacion del cliente',
    nombre VARCHAR(30) NOT NULL COMMENT 'Nombre del cliente',
    direccion VARCHAR(30) NOT NULL COMMENT 'direccion para entrega de mercancia al cliente',
   	ciudad VARCHAR(20) NOT NULL COMMENT 'Nombre de la ciudad de ubicacion del cliente',
    telefono VARCHAR(15)NOT NULL COMMENT 'El numero telefonico del contacto',
    PRIMARY KEY (num_cliente) COMMENT 'Es el id de cada registro'

);

show columns from cliente; (Con esta instruccion podemos ver lo que creamos en la parte de arriba)
show full columns from cliente; (Con esta instruccion podemos ver la informacion completa que creamos en la parte de arriba)

//PARA VERISONES ANTERIORES A MySQL 8.0
CREATE TABLE IF NOT EXISTS factura
(
    num_factura INTEGER NOT NULL COMMENT 'numero unico de documento',
    num_cliente INTEGER NOT NULL COMMENT 'numero de identifiacion del cliente',
    fecha_factura DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'fecha del documento',
    valor_total MEDIUMINT UNSIGNED NOT NULL COMMENT 'valor total de la transaccion',
    PRIMARY KEY (num_factura) COMMENT 'el numero del documento debe ser unico',
    KEY (num_cliente) COMMENT 'es un indice de busqueda'
);

CREATE TABLE IF NOT EXISTS det_factura
(
	num_factura INTEGER NOT NULL COMMENT 'numero unico de documento',
    cod_producto SMALLINT UNSIGNED NOT NULL COMMENT 'numero de identificacion del producto',
    cant_vendida TINYINT UNSIGNED NOT NULL COMMENT 'cantidad de unidades compradas de este producto',
    valor_unitario SMALLINT UNSIGNED NOT NULL COMMENT 'valor unitariod e compra de este producto',
    PRIMARY KEY (num_factura,cod_producto) COMMENT 'solo un producto igual en cada documento',
    KEY (cod_producto) COMMENT 'indice de busqueda por codigo deproducto'
);

CREATE TABLE IF NOT EXISTS productos
(
    cod_producto SMALLINT UNSIGNED NOT NULL COMMENT 'numero de identificacion del proucto',
    descripcion VARCHAR(60) NOT NULL COMMENT 'descripcion completa del producto',
    precio_venta SMALLINT UNSIGNED NOT NULL COMMENT 'valor unitario de este productio hoy',
    PRIMARY KEY (cod_producto) COMMENT 'cada producto tiene un codigo unico',
    KEY (descripcion) COMMENT 'indice de busqueda por descripcion del producto'
    );

 **************** COMO VISUALIZAR EL ESQUEMA DE LA BD *************

 SHOW CREATE { DATABASE | SCHEMA }
 	[IF NOT EXISTS] nombre_basedatos

Ejemplo:

USE clientes;
SHOW CREATE DATABASE clientes;

 ******************************* COMO INSERTAR DATOS EN LA BD ****************************

INSERT INTO nombre_tabla(donde vas a insertar datos)
		(columna_1, columna_2,...columna_n)
			VALUES (valor_1,valor_2,...valor_n)
	[WHERE condición(opcional)]

EJEMPLO:
1)
INSERT INTO cliente (num_cliente,nombre,direccion,ciudad,telefono)
	VALUES(10,"Alejandro","Av. americas 78-90","bogota","+(57)304-6239358");

2)
INSERT INTO factura (num_factura,num_cliente,valor_total)
	VALUES(2543,10,12500);

3)
INSERT INTO productos (cod_producto,descripcion,precio_venta)
	VALUES(774878344,"tv 4k 65 pulgadas",10000);
4)
INSERT INTO det_factura (num_factura,cod_producto,cant_vendida,valor_unitario)
	VALUES(2543,774878344,1,10000);

 ******************************* SENTENCIA SELECT EN MySQL ****************************

SELECT [* | ALL | col1,col2,... coln]
	[INTO 'archivo_salida']
	 	FROM nombre_tabla[,nombre_tabla,...]
	[WHERE expresion_condicion]
	[GROUP BY columnas]
	[ORDER BY columnas[ ASC | DESC ]]
	[LIMIT #]

	FUNCIONES DE AGREGACION:
	-count:Devuelve el numero total de filas seleccionadas por la consulta.
	-min:Devuelve el valor minimo del campoque especifiquemos.
	-max:Devuelve el valor maximo del campoque especifiquemos.
	-sum:Suma los valores de los campos que especifiquemos(solo numeros)
	-avg:Devuelve el valor promedio de los campos que esecifiquemos(solo numeros)
		EJEMPLOS:
		-SELECT sum(valor_total)
		-SELECT count(*)
		-SELECT min(precio_venta)

******************************* ACTUALIZAR DATOS DE UNA TABLA ****************************

	UPDATE [LOW_PRIORITY][IGNORE] tabla
		SET columna=nuevo_valor
	  [WHERE condicion_seleccion]
		[LIMIT row_count]

EJEMPLO:

1)
UPDATE cliente SET nombre = "Alejandro Guzman" WHERE num_cliente = 10

2)
UPDATE factura,det_factura set det_factura.valor_unitario = det_factura.valor_unitario-500,factura.valor_total=factura.valor_total-500 WHERE det_factura.num_factura = factura.num_factura AND factura.num_factura = 2545 AND det_factura.num_factura = 2545;

	******************************* ELIMINAR REGISTROS DE UNA TABLA ****************************

DELETE [LOW_PRIORITY][QUICK][OGNORE]
	FROM tabla
	[WHERE condicion_seleccion]
	[ORDER BY columna]
	[LIMIT #]

EJEMPLO
1)
DELETE FROM cliente WHERE num_cliente = 20;

  ******************************* CONSULTA DE DATOS NO EXACTO DE UNA TABLA ****************************

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto = 775627384;

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto LIKE "%Videojuegos%";

SELECT cod_producto,descripcion,precio_venta FROM productos
WHERE cod_producto NOT LIKE "%Videojuegos%";

SELECT * FROM productos WHERE cod_producto NOT LIKE "M%";

  ******************************* FUNCIONES DE COMPARACION Y OPERADORES ****************************

BETWEEN ... AND
	Sintaxis -> expresión BETWEEN minimo AND máximo
	Ejemplo -> precio_venta BETWEEN 3000 AND 5000

función COALESCE()
	Sintaxis -> COALESCE(valor1,valor2,valor3,...) = Devuelve el primer valor NOT NULL de una lista o NULL si no hay valores
	Ejemplo -> SELECT nombre,COALESCE(num_factura) FROM clientes, factura WHERE factura.num_cliente =clientes.num_cliente

Operador <->(Seguro o igual a null)
	Sintaxis ->
	Ejemplo ->SELECT NULL <=> 1,NULL <=> NULL, 3 <=> NULL

Operador = (Igual a)
	Sintaxis -> Operador de Igual
	Ejemplo ->1=1,1=2,null=null,null=3,3=null;

Operador >= (Mayor o igual a):Comprueba si una expresion es igual o mayor que otra expresion.
	Sintaxis -> expresión >= valor
	Ejemplo ->precio_venta >=5000

Función GREATES():Devuelve el mayor de los argumentos dados, y devolver null si cualquiera de sus argumentos es null
	Sintaxis -> GREATES(valor1,valor2,...)
	Ejemplo -> SELECT GREATES(15,10,25);

Función IN():Encuentra una coincidencia de los argumentos dados y devuelve 1 si la expresion es igual a cualquiera de los valores de la lista IN, de lo contrario devolverá 0.
	Sintaxis -> expresion IN (value,...)
	Ejemplo ->SELECT num_cliente, nombre FROM cliente WHERE num_cliente IN (10,20)

Función INTERVAL():Devuelve el indice del argumento que es menor que el primer argumento. Devuelve 0 si el primer numero es menor que el segundo numero y 1 si el primer numero es menor que el tercer numero y asi de forma sucesiva. O devolvera -1 si el primer numero es NULL.Todos loas argumentos en está sentencia se tratan como numeros enteros.
	Sintaxis -> INTERVAL(N,N1,N2,N3,...)
	Ejemplo ->SELECT interval (85,1,75,17,30,56,175): Aquie devuelve el numero 5 que es la posicion

Operador IS NOT NULL:Verifica si un valor no es nulo
	Sintaxis -> SELECT 5 IS NOT NULL, 0 IS NOT NULL,NULL IS NOT NULL;
	Ejemplo -> SELECT * FROM productos WHERE descripcion IS NOT NULL;(traiga todos los productos cuya descripcion no sea nula)

Operador IS NOT:Este operador prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->select 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN,null IS NOT UNKNOWN;
	Ejemplo ->

Operador IS NULL:Prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;
	Ejemplo ->

Operador IS:Prueba un valor contra un valor boleano,donde el valor boleano puede ser TRUE, FALSE o UNKNOWN.
	Sintaxis ->SELECT 1 IS TRUE,0 IS FALSE,NULL IS UNKNOWN;
	Ejemplo ->

Función ISNULL():Devolvera un valor 1 cuando la expresion sea nula, de lo contrario siempre devolvera un valor 0.
	Sintaxis -> ISNULL(1+0), en este ejemplo devuelve 0 por que no es nulo.
	Ejemplo ->

Función LEAST():Devuelve el argumento mas pequeño de 2 o más argumentos.Si el argumento es NULL el resultado sera null. Si son valores enteros se compararan con valores enteros.Si se utiiza un cotexto de tipo realy todos los argumentos son de tipo real, se compararán de está forma.Si hay una combinacion de numeros y cadenas, se compararán como numeros.
	Sintaxis ->
	Ejemplo ->SELECT LEAST(15,10,25), aqui arrojara el numero 10 como resultado
			  SELECT LEAST("z","m","s"), aqui arrojara la letra m.

  ******************************* OPERADORES LOGICOS ****************************
En MySQL todos los operadores logico se valuan a TRUE, FALSE o NULL(UNKNOWN). Y se implementa de la siguiente forma:
	1->TRUE
	0->FALSE
	NULL

NOT ó !:
Ejemplos:
	SELECT NOT 10; 	-> 0
	SELECT NOT 0; 	-> 1
	SELECT NOT NULL; -> NULL
	SELECT ! (1+1); -> 0
	SELECT ! 1+1; 	-> 1

AND ó &&:Logica.Se evalua a 1 si todos los operadores sondistintos a cero y no NULL, a 0 si uno o más operandos son 0,de otro modo retorna null.
Ejemplos:
	SELECT 1 && 1; 	-> 1
	SELECT 1 && 0; 	-> 0
	SELECT 1 && NULL; -> NULL
	SELECT 0 && NULL; -> 0
	SELECT NULL && 0; 	-> 0

OR ó||:LOGICO. Cuando ambos operandos son no NULL, le resultado es 1 si algun operando es diferente a cero,y 0 de otro modo.Con un operando NULL el resultado es 1 si el otro operando no es cero,y NULL de otro modo.Si ambos operandos son NULL,el resultado es NULL.
Ejemplos:
	SELECT 1 || 1; 	-> 1
	SELECT 1 || 0; 	-> 1
	SELECT 0 || 0; 	-> 0
	SELECT 1 || NULL; -> 1
	SELECT 0 || NULL; -> NULL
	SELECT NULL || 0; 	-> 0

XOR:Logica.Retorna NULL si algún operando es NULL.Para operandos no NULL,evaluaa 1 si un numero par de operadores es distinto a cero,sino retorna 0.
Ejemplos:
	SELECT 1 XOR 1; 	-> 0
	SELECT 1 XOR 0; 	-> 1
	SELECT 1 XOR NULL; 	-> NULL
	SELECT 1 XOR 1 XOR 1; 	-> 1
	******************************* FUNCIONES DE CONTROL DE FLUJO ****************************
CASE:
IF:
IFNULL:
NULLIF:
